;; Analyzed by ClojureScript 0.0-3291
{:use-macros nil, :excludes #{}, :name om-bootstrap.table, :imports nil, :requires {t om-bootstrap.types, schema.core schema.core, u om-bootstrap.util, om-tools.dom om-tools.dom, s schema.core, om-bootstrap.util om-bootstrap.util, om.core om.core, om om.core, om-bootstrap.types om-bootstrap.types, d om-tools.dom}, :uses nil, :defs {Table {:name om-bootstrap.table/Table, :file "resources\\public\\js\\om_bootstrap\\table.cljs", :line 8, :column 1, :end-line 8, :end-column 11, :meta {:file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\NoCostMobileApp\\Development\\BrewersClj\\resources\\public\\js\\om_bootstrap\\table.cljs", :line 8, :column 6, :end-line 8, :end-column 11}}, table {:schema (schema.core/make-fn-schema output-schema32220 [input-schema32221]), :protocol-inline nil, :meta {:schema (schema.core/make-fn-schema output-schema32220 [input-schema32221]), :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\NoCostMobileApp\\Development\\BrewersClj\\resources\\public\\js\\om_bootstrap\\table.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(G__32224 rest32225)], :arglists ([G__32224 & rest32225]), :arglists-meta (nil)}, :column 9, :raw-arglists (quote ([opts :- Table & children])), :line 15, :end-line 15, :arglists (quote ([opts & children])), :doc "Inputs: [opts :- Table & children]\n\n  Generates a Bootstrap table wrapper."}, :name om-bootstrap.table/table, :variadic true, :file "resources\\public\\js\\om_bootstrap\\table.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(G__32224 rest32225)], :arglists ([G__32224 & rest32225]), :arglists-meta (nil)}, :method-params [(G__32224 rest32225)], :protocol-impl nil, :arglists-meta (nil), :column 1, :raw-arglists (quote ([opts :- Table & children])), :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists ([G__32224 & rest32225]), :doc "Inputs: [opts :- Table & children]\n\n  Generates a Bootstrap table wrapper."}}, :require-macros {om om.core, om.core om.core, d om-tools.dom, om-tools.dom om-tools.dom, s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{:table-bordered :schema :schema.core/error :table :value :bordered? :type :condensed? :responsive? :class :table-striped :error :table-hover :striped? :hover? :table-condensed}, :order [:striped? :bordered? :condensed? :hover? :responsive? :type :schema :value :error :schema.core/error :table :table-striped :table-bordered :table-condensed :table-hover :class]}, :doc nil}