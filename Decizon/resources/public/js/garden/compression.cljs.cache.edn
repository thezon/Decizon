;; Analyzed by ClojureScript 0.0-3291
{:use-macros nil, :excludes #{}, :name garden.compression, :imports nil, :requires nil, :uses nil, :defs {token-fn {:protocol-inline nil, :meta {:file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\NoCostMobileApp\\Development\\BrewersClj\\resources\\public\\js\\garden\\compression.cljs", :line 35, :column 8, :end-line 35, :end-column 16, :private true, :arglists (quote ([[tag re]])), :doc "Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag."}, :private true, :name garden.compression/token-fn, :variadic false, :file "resources\\public\\js\\garden\\compression.cljs", :end-column 16, :method-params ([p__32904]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag re]])), :doc "Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag."}, tokenizer {:protocol-inline nil, :meta {:file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\NoCostMobileApp\\Development\\BrewersClj\\resources\\public\\js\\garden\\compression.cljs", :line 46, :column 8, :end-line 46, :end-column 17, :private true, :arglists (quote ([& tags+regexes])), :doc "Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(tags+regexes)], :arglists ([& tags+regexes]), :arglists-meta (nil)}}, :private true, :name garden.compression/tokenizer, :variadic true, :file "resources\\public\\js\\garden\\compression.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(tags+regexes)], :arglists ([& tags+regexes]), :arglists-meta (nil)}, :method-params [(tags+regexes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 0, :fn-var true, :arglists ([& tags+regexes]), :doc "Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively."}, stylesheet-tokenizer {:name garden.compression/stylesheet-tokenizer, :file "resources\\public\\js\\garden\\compression.cljs", :line 57, :column 1, :end-line 60, :end-column 23, :private true, :doc "Tokenizer used during stylesheet compression.", :meta {:file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\NoCostMobileApp\\Development\\BrewersClj\\resources\\public\\js\\garden\\compression.cljs", :line 60, :column 3, :end-line 60, :end-column 23, :private true, :doc "Tokenizer used during stylesheet compression."}}, compress-stylesheet {:protocol-inline nil, :meta {:file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\NoCostMobileApp\\Development\\BrewersClj\\resources\\public\\js\\garden\\compression.cljs", :line 79, :column 7, :end-line 79, :end-column 26, :arglists (quote ([stylesheet])), :doc "Compress a string of CSS using a basic compressor."}, :name garden.compression/compress-stylesheet, :variadic false, :file "resources\\public\\js\\garden\\compression.cljs", :end-column 26, :method-params ([stylesheet]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stylesheet])), :doc "Compress a string of CSS using a basic compressor."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:l-brace :l-paren :space+ :comma :white-space+ :string :size :colon :semicolon :r-brace :tag :r-paren :chunk :any}, :order [:tag :chunk :size :string :r-brace :l-brace :r-paren :l-paren :comma :colon :semicolon :space+ :white-space+ :any]}, :doc "Stylesheet compression utilities."}