cmdhistory=["(+ 1 1)" "(require '[ring.middleware.resource])" "(require '[ring.middleware.resource \:as rsc])" "(c/build src \\"/resources/public/js/\\")" "\\r\\n\\r\\n      (c/build \\"src\\" {\\r\\n                    \:output-to \\"/resources/public/js/main.js\\"\\r\\n                    \:output-dir \\"/resources/public/js/\\"\\r\\n                    \:warnings true})" "(kill-processes)" "\\r\\n\\r\\n      (c/build \\"src\\" {\\r\\n                    \:output-to \\"/resources/public/js/main.js\\"\\r\\n                    \:output-dir \\"/resources/public/js/\\"\\r\\n                    \:warnings true})" "\\r\\n\\r\\n      (c/build \\"src\\" {\\r\\n                    \:output-to \\"\\\\\\\\resources\\\\\\\\public\\\\\\\\js\\\\\\\\main.js\\"\\r\\n                    \:output-dir \\"\\\\\\\\resources\\\\\\\\public\\\\\\\\js\\\\\\\\\\"\\r\\n                    \:warnings true})" "(\:one {} \\"yep\\")" "(\:one {} )" "(str \\"one\\" \\"two\\")" "(conj [] \\"test\\")" "(defn new-dim [val]\\r\\n  (let [dim (conj (\:dim session) val)]\\r\\n  (reset\! session (assoc session \:dim dim))))" "(def session (atom {\:dim [\\"one\\" \\"two\\"] \:top []}))" "(defn new-dim [val]\\r\\n  (let [dim (conj (\:dim session) val)]\\r\\n  (reset\! session (assoc session \:dim dim))))" "(new-dim \\"five\\")" "(defn new-dim [val]\\r\\n  (let [dim (conj (\:dim session) val)]\\r\\n  (reset\! session (assoc @session \:dim dim))))" "(new-dim \\"five\\")" "(defn new-dim [val]\\r\\n  (let [dim (conj (\:dim session) val)]\\r\\n  (reset\! session (assoc @session \:dim dim))))" "(def session (atom {\:dim [\\"one\\" \\"two\\"] \:top []}))" "(new-dim \\"five\\")" "(defn new-dim [val]\\r\\n  (let [dim (conj (\:dim session) val)\\n        _ (println dim)]\\n   \\r\\n  (reset\! session (assoc @session \:dim dim))))" "(new-dim \\"five\\")" "(def session (atom {\:dim [\\"one\\" \\"two\\"] \:top []}))" "(new-dim \\"five\\")" "(defn new-dim [val]\\r\\n  (let [dim (conj (\:dim @session) val)\\n        _ (println dim)]\\n   \\r\\n  (reset\! session (assoc @session \:dim dim))))" "(def session (atom {\:dim [\\"one\\" \\"two\\"] \:top []}))" "(defn new-dim [val]\\r\\n  (let [dim (conj (\:dim @session) val)\\n        _ (println dim)]\\n   \\r\\n  (reset\! session (assoc @session \:dim dim))))" "(new-dim \\"five\\")" "(range 10)" "(let [[o t] [1 3]] (str o t))" "(range 3)" "(map list [3 3 3 3] (+ 1 (range 4)))" "(map seq [3 3 3 3] (+ 1 (range 4)))" "(+ 1 (range 4))" "(range 4)" "(apply + 1 (range 4))" "(range 1 4)" "(map seq [3 3 3 3] (range 1 5))" "(map list [3 3 3 3] (range 1 5))" "(remove (\= 1) [ 3 4 1])" "(remove (\= 1 %) [ 3 4 1])" "(remove \#(\= 1 %) [ 3 4 1])" "(subvec [2 3] 0 1)" "(subvec [2 3 4] 1 2\\n        )" "(subvec [2 3 4] 1 \\n        )" "(subvec [2 3 4] 2 )" "(subvec [2 3 4]0 2 )" "(subvec [2 3 4] 0 1 )" "(subvec [2 3 4]  1 )" "(+ 1 (range 3))" "(apply inc (range 3))" "(->(range 3) inc)" "(dec 4)" "(conj (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 0 2) \\n      (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 2))" "(conj (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 0 2) \\n      (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 2 4))" "(concat (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 0 2) \\n      (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 2 4))" "(concat (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 0 2) \\n      (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 2))" "(concat (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 0 2) \\n      (subvec [ \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\"] 3))" "(name \:one)" "(empty? [])" "({\:one 1} \:one)" "(vec  nil)" "(keyword? \:st)" "(empty? [nil])" "(remove nil? [nil])" "(str (name \:test) \\"name\\")" "(key \\"car\\")" "(keyword \\"car\\")" "(nth 4 [4])" "(number? nil)" "(def buildref \\r\\n  (future\\r\\n      (def options {\\r\\n                    \:output-to output-file\\r\\n                    \:output-dir output-dir\\r\\n                    \:warnings true})\\r\\n      (c/build \\"src\\" options)     \\r\\n      (c/watch \\"src\\" options)))" "(kill-processes)" " (def options {\\r\\n                    \:output-to output-file\\r\\n                    \:output-dir output-dir\\r\\n                    \:warnings true})\\r\\n      (c/build \\"src\\" options)" "( + 1` 1)" "(j/run-jetty (h/site entry-var) {\:port server-port})" " (def options {\\r\\n                    \:output-to output-file\\r\\n                    \:output-dir output-dir\\r\\n                    \:warnings true})\\r\\n      (c/build \\"src\\" options)" "(def options {\\r\\n                    \:output-to output-file\\r\\n                    \:output-dir output-dir\\r\\n                    \:warnings true})\\r\\n      (c/build \\"src\\" options)" "(nth 1 [1])" "(range 4)" "(num \\"1\\")" "(subvec [1 2 3 4] 1)" "(subvec [1 2 3 4] 0 1)" "(subvec [1 2 3 4] 0 3\\n        )" "(subvec [1 2 3 4] 0 0\\n        )" "(subvec [1 2 3 4] 0 1)" "(let [entry-col [ 1 2 3 4 5 6] loc-num 3]\\n(concat (subvec entry-col 0  loc-num)  ubvec entry-col  (inc loc-num)))" "(let [entry-col [ 1 2 3 4 5 6] loc-num 3]\\n(concat (subvec entry-col 0  loc-num)  (subvec entry-col  (inc loc-num)))" "(let [entry-col [ 1 2 3 4 5 6] loc-num 3]\\n(concat (subvec entry-col 0  loc-num)  (subvec entry-col  (inc loc-num))))" "(let [entry-col [0 1 2 3 4 5 6] loc-num 3]\\n(concat (subvec entry-col 0  loc-num)  (subvec entry-col  (inc loc-num))))" "(let [entry-col [0 1 2 3 4 5 6] loc-num 0]\\n(concat (subvec entry-col 0  loc-num)  (subvec entry-col  (inc loc-num))))" "(let [entry-col [0 1 2 3 4 5 6] loc-num 6]\\n(concat (subvec entry-col 0  loc-num)  (subvec entry-col  (inc loc-num))))" "(contains? \:select [\:select])" "(contain? [\:select] \:select )" "\=> (filter \#(select %)  [\:select] \:)" "\=> (filter \#(select %)  [\:select] )" "\=> (filter \#(\= \:select %)  [\:select] )" "\=> (filter \#(\= \:select %)  [\:seledct] )" "(if (filter (\= \:select %) [\:select]) \\"true\\" \\"false\\")" "(if (filter \#(\= \:select %) [\:select]) \\"true\\" \\"false\\")" "(if (filter \#(\= \:select %) [\:selesct]) \\"true\\" \\"false\\")" "(if (empty? (filter \#(\= \:select %) [\:select])) \\"true\\" \\"false\\")" "(if (empty? (filter \#(\= \:select %) [\:selecdt])) \\"true\\" \\"false\\")" "(if (not-empty (filter \#(\= \:select %) [\:selecdt])) \\"true\\" \\"false\\")" "(if (not-empty (filter \#(\= \:select %) [\:select])) \\"true\\" \\"false\\")" "(reverse [1 2 3])" "(do (+ 1 1) nil)" " (def options {\\r\\n                    \:output-to output-file\\r\\n                    \:output-dir output-dir\\r\\n                    \:warnings true})\\r\\n      (c/build \\"src\\" options)" "(filter \#(\= % nil) [1 1 nil 1 1 nil])" "(let [item-size 4\\n      catagory-size 4]\\n  (repeat item-size (repeat catagory-size nil)))" "(let [item-size 4\\r\\n         catagory-size 4]\\r\\n     (into [] (repeat item-size (into [] (repeat catagory-size nil)))))" "[0 0 4]" "(defn insert-value [item-one-pos cat-one-pos item-two-pos cat-two-pos result-key]\\n  (cond \\n    (\= result-key \:eq)" "(defn get-dec-value [item-num cat-num]\\n  (filter \#(and (item-num (first %)) (cat-num (second %)) [0 1 4]))" "(defn get-dec-value [item-num cat-num]\\n  (filter \#(and (item-num (first %)) (cat-num (second %)) [0 1 4])))" "(defn get-dec-value [item-num cat-num]\\n  (last (filter \#(and (item-num (first %)) (cat-num (second %)) [0 1 4]))))" "(get-dec-value 0 1)" "(defn get-dec-value [item-num cat-num]\\n  (filter \#(and (item-num (first %)) (cat-num (second %)) [[0 1 4]])))" "(get-dec-value 0 1)" "(defn get-dec-value [item-num cat-num]\\n  (filter \#(and (item-num (first %)) (cat-num (second %))) [[0 1 4]]))" "(get-dec-value 0 1)" "(defn get-dec-value [item-num cat-num]\\n  (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) [[0 1 4] [0 0 0]]))" "(get-dec-value 0 1)" "(defn get-dec-value [item-num cat-num]\\n  (last (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) [[0 1 4] [0 0 0]])))" "(get-dec-value 0 1)" "(defn get-dec-value [item-num cat-num]\\n  (apply last (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) [[0 1 4] [0 0 0]])))" "(get-dec-value 0 1)" "(defn get-dec-value [item-num cat-num decision-list]\\n  (apply last (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)))" "(get-dec-value 0 0)" "(get-dec-value 0 1)" "(get-dec-value 0 1 [[0 1 10]])" "(get-dec-value 0 1 [[0 0 10]])" "(defn get-dec-value [item-num cat-num decision-list] \\n     (-> (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list))\\n     \#(if (empty? %) nil (apply last %)))" "(get-dec-value 0 1 [[0 0 10]])" "(get-dec-value 0 1 [[0 1 10]])" "(defn get-dec-value [item-num cat-num decision-list] \\n     (-> (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)\\n     \#(if (empty? %) nil (apply last %))))" "(defn get-dec-value [item-num cat-num decision-list] \\n     (-> \\n       (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)\\n     \#(if (empty? %) nil (apply last %))))" "(defn get-dec-value [item-num cat-num decision-list] \\n     \\n       (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list))" "(defn get-dec-value [item-num cat-num decision-list] \\n     \\n       (map \#(if (empty? %) nil (apply last %) (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list))))" "(defn get-dec-value [item-num cat-num decision-list] \\n     \\n       (map \#(if (empty? %) nil (apply last %)) (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)))" "(get-dec-value 0 1 [[0 0 10]])" "(get-dec-value 0 1 [[0 1 10]])" "(defn get-dec-value [item-num cat-num decision-list] \\n     \\n       (map \#(if (empty? %) nil (last %)) (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)))" "(get-dec-value 0 1 [[0 1 10]])" "(defn get-dec-value [item-num cat-num decision-list] \\n       (apply map \#(if (empty? %) nil (last %)) \\n            (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)))" "(get-dec-value 0 1 [[0 1 10]])" "(defn get-dec-value [item-num cat-num decision-list] \\n       (map \#(if (empty? %) nil (last %)) \\n            (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)))" "(defn get-dec-value [item-num cat-num decision-list] \\n       (->  (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)) \\n       \#(if (empty? %) nil (last %)))" "(get-dec-value 0 1 [[0 1 10]])" "(defn get-dec-value [item-num cat-num decision-list] \\n       (->  (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)\\n       \#(if (empty? %) nil (last %))))" "(defn get-dec-value [item-num cat-num decision-list] \\n       (->>  (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)\\n       \#(if (empty? %) nil (last %))))" "(get-dec-value 0 1 [[0 1 10]])" "(defn get-dec-value [item-num cat-num decision-list] \\n       (map \#(if (empty? %) nil (last %)) \\n            (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)))" "(get-dec-value 0 1 [[0 1 10]])" "(defn get-dec-value [item-num cat-num decision-list] \\n      (first \\n        (map \#(if (empty? %) nil (last %)) \\n             (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list))))" "(defn get-dec-value [item-num cat-num decision-list] \\n      (first \\n        (map \#(if (empty? %) [] (last %)) \\n             (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list))))" "(get-dec-value 0 1 [[0 1 10]])" "(get-dec-value 0 1 [[0 0 10]])" "(defn non-set-value-pos [decision-list]" "(let [item-index 2\\n      cat-index 2\\n      decision-list [[1 1 9] [2 4 5]]]\\n   (map \#(first %) decision-list))" "(let [item-index 2\\n      cat-index 2\\n      decision-list [[1 1 9] [2 4 5]]]\\n   (map \#(subvec 1) decision-list))" "(let [item-index 2\\n      cat-index 2\\n      decision-list [[1 1 9] [2 4 5]]]\\n   (map \#(subvec % 1) decision-list))" "(let [item-index 2\\n      cat-index 2\\n      decision-list [[1 1 9] [2 4 5]]]\\n   (map \#(subvec 0 1) decision-list))" "(let [item-index 2\\n      cat-index 2\\n      decision-list [[1 1 9] [2 4 5]]]\\n   (map \#(subvec % 0 1) decision-list))" "(let [item-index 2\\n      cat-index 2\\n      decision-list [[1 1 9] [2 4 5]]]\\n   (map \#(subvec % 0 2) decision-list))" "(for [item-index (range 3) cat-index (range 3)]\\n  [item-index cat-index])" "(require 'clojure.set)" "(let [item-index 2\\n      cat-index 2\\n      decision-list [[1 1 9] [2 4 5]]]\\n  \\n  (clojure.set/difference \\n    (into \#{} \\r\\n         (for [item-index (range 3) cat-index (range 3)]\\r\\n           [item-index cat-index]))\\n   (into \#{} \\n         (map \#(subvec % 0 2) decision-list))))" "(defn elements-not-set [item-index cat-index decision-list]\\n  (clojure.set/difference \\n    (into \#{} \\r\\n         (for [item-index (range 3) cat-index (range 3)]\\r\\n           [item-index cat-index]))\\n   (into \#{} \\n         (map \#(subvec % 0 2) decision-list))))" "(elements-not-set 3 3 [[1 1 9] [2 4 5]])" "(elements-not-set 2 2 [[1 1 9] [2 4 5]])" "(defn elements-not-set [item-size cat-size decision-list]\\n  (clojure.set/difference \\n    (into \#{} \\r\\n         (for [item-index (range (dec 3)) cat-index (range (dec 3))]\\r\\n           [item-index cat-index]))\\n   (into \#{} \\n         (map \#(subvec % 0 2) decision-list))))" "(->> 3 dec range)" "(->> 4 dec range)" "(defn elements-not-set [item-size cat-size decision-list]\\n  (clojure.set/difference \\n    (into \#{} \\r\\n         (for [item-index (->> item-size dec range) cat-index (->> cat-size dec range)]\\r\\n           [item-index cat-index]))\\n   (into \#{} \\n         (map \#(subvec % 0 2) decision-list))))" "(elements-not-set 2 2 [[1 1 9] [2 4 5]])" "(elements-not-set 3 3 [[1 1 9] [2 4 5]])" "(range 3)" "(defn elements-not-set [item-size cat-size decision-list]\\n  (clojure.set/difference \\n    (into \#{} \\r\\n         (for [item-index (range item-size) cat-index (range cat-size)]\\r\\n           [item-index cat-index]))\\n   (into \#{} \\n         (map \#(subvec % 0 2) decision-list))))" "(elements-not-set 3 3 [[1 1 9] [2 4 5]])" "(defn next-rand-select [dec-list item-list cat-list]\\n  (->> \\n    (rand-nth (elements-not-set (count item-list) (count cat-list) dec-list))\\n    (fn [x] [(first x) (nth dec-list (first x)) (second x) (nth cat-list (second x))])))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select [dec-list item-list cat-list]\\n  (map (fn [x] [(first x) (nth dec-list (first x)) (second x) (nth cat-list (second x))])\\n    (rand-nth (elements-not-set (count item-list) (count cat-list) dec-list))\\n    ))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "\\n    (rand-nth (elements-not-set 3 3  [[1 1 4]]))" " (elements-not-set 3 3  [[1 1 4]])" " (into [] (elements-not-set 3 3  [[1 1 4]])" " (into [] (elements-not-set 3 3  [[1 1 4]]))" "(rand-nth(into [] (elements-not-set 3 3  [[1 1 4]])))" "(defn next-rand-select [dec-list item-list cat-list]\\n  (map (fn [x] [(first x) (nth dec-list (first x)) (second x) (nth cat-list (second x))])\\n    (rand-nth(into [] (elements-not-set 3 3  [[1 1 4]])))\\n    ))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select [dec-list item-list cat-list]\\n  (->> (rand-nth (into [] (elements-not-set 3 3  [[1 1 4]])))\\n    (fn [x] [(first x) (nth dec-list (first x)) (second x) (nth cat-list (second x))])\\n    \\n    ))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select [dec-list item-list cat-list]\\n  (let [[it-n cat-n]  (rand-nth (into [] (elements-not-set 3 3  [[1 1 4]])))]\\n  [ it-n (nth dec-list it-n) cat-n (nth cat-list cat-n)]))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select [dec-list item-list cat-list]\\n  (let [[it-n cat-n]  (rand-nth (into [] (elements-not-set 3 3  [[1 1 4]])))\\n        _ (println it-n cat-n)]\\n  [ it-n (nth dec-list it-n) cat-n (nth cat-list cat-n)]))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select [dec-list item-list cat-list]\\n  (let [[it-n cat-n]  (rand-nth (into [] (elements-not-set 3 3  [[1 1 4]])))\\n        _ (println it-n cat-n)]\\n  [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)]))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select[dec-list item-list cat-list []])) \\r\\n  ([dec-list item-list cat-list exclude-pos-vec]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [[it-n cat-n]  (rand-nth (into [] (elements-not-set (count item-list) (count cat-list)  (conj exclude-pos-vec dec-list))))\\r\\n        _ (println it-n cat-n)]\\r\\n  [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)]))" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select[dec-list item-list cat-list []])) \\r\\n  ([dec-list item-list cat-list exclude-pos-vec]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [[it-n cat-n]  (rand-nth (into [] (elements-not-set (count item-list) (count cat-list)  (conj exclude-pos-vec dec-list))))\\r\\n        _ (println it-n cat-n)]\\r\\n  [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)])))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list [])) \\r\\n  ([dec-list item-list cat-list exclude-pos-vec]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [[it-n cat-n]  (rand-nth (into [] (elements-not-set (count item-list) (count cat-list)  (conj exclude-pos-vec dec-list))))\\r\\n        _ (println it-n cat-n)]\\r\\n  [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)])))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list [])) \\r\\n  ([dec-list item-list cat-list exclude-pos-vec]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [[it-n cat-n]  (rand-nth (into [] (elements-not-set (count item-list) (count cat-list)  (conj  dec-list exclude-pos-vec))))\\r\\n        _ (println it-n cat-n)]\\r\\n  [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)])))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list [])) \\r\\n  ([dec-list item-list cat-list exclude-pos-vec]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [_ (print (conj  dec-list exclude-pos-vec))\\n        [it-n cat-n]  (rand-nth (into [] (elements-not-set (count item-list) (count cat-list)  (conj  dec-list exclude-pos-vec))))\\r\\n        _ (println it-n cat-n)]\\r\\n  [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)])))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list exclude-pos-vec]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [_ (print (conj  dec-list exclude-pos-vec))\\n        [it-n cat-n]  (rand-nth (into [] (elements-not-set (count item-list) (count cat-list)  (conj  dec-list exclude-pos-vec))))\\r\\n        _ (println it-n cat-n)]\\r\\n  [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)])))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list exclude-pos-vec]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [_ (print (conj  dec-list exclude-pos-vec))\\n        [it-n cat-n]  (rand-nth (into [] (elements-not-set \\n                                           (count item-list) (count cat-list)  \\n                                           (if (nil? exclude-pos-vec)\\n                                             dec-list\\n                                           (conj  dec-list exclude-pos-vec)))))\\r\\n        _ (println it-n cat-n)]\\r\\n  [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)])))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list exclude-pos-vec]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [[it-n cat-n]  (rand-nth \\n                        (into [] (elements-not-set \\n                                   (count item-list) (count cat-list)  \\n                                   (if (nil? exclude-pos-vec)\\n                                     dec-list\\n                                     (conj  dec-list exclude-pos-vec)))))]\\r\\n    [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)])))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list exclude-pos-vec]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [[it-n cat-n]  (rand-nth \\n                        (into [] (elements-not-set \\n                                   (count item-list) (count cat-list)  \\n                                   (if (nil? exclude-pos-vec)\\n                                     dec-list\\n                                     (conj  dec-list exclude-pos-vec)))))]\\r\\n    [ it-n (nth item-list it-n) cat-n (nth cat-list cat-n)])))" "(next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(let [ first-rand (next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )\\n      second-rand (next-rand-select [[1 1 4]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] first-rand)]\\n  [first-rand second-rand])" "(defn get-compare [dec-list item-list cat-list]\\n  (let [compare-element (next-rand-select dec-list  item-list cat-list)]\\n    [compare-element (next-rand-select dec-list  item-list cat-list compare-element)]))" "(\:one \:two {\:one 2 \:two 3})" "(\:one \:two {\:one 2 \:two 3 \:three 4})" "(\:one \\n  {\:one 2 \:two 3 \:three 4})" "(let [map-s {\:one 2 \:two 3 \:three 4}]\\n(for [ key-vec [\:one \:two]]\\n  (key-vec map-s)))" "(next-rand-select [] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(get-compare [] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"] )" "(let [attr [\\"one\\" \\"two\\" \\"three\\"] \\n      item [\\"one\\" \\"two\\" \\"three\\"]\\n      dec-list [[0 2 1 2] [1 2 1 2]]]" "(for [item-index (range 3) cat-index (range 3)]\\n  \\r\\n            [item-index cat-index])" "(filter \#(not (\= %1 %2))(for [item-index (range 3) cat-index (range 3)]\\n                          \\r\\n            [item-index cat-index]))" "(filter \#(not (\= (first %1) (second %2)))(for [item-index (range 3) cat-index (range 3)]\\n                                           \\r\\n            [item-index cat-index]))" "(filter \#(not (\= (first %) (second %)))(for [item-index (range 3) cat-index (range 3)]\\n                                         \\r\\n            [item-index cat-index]))" "(filter \#((and (\=< first %) (second %))not (\= (first %) (second %)))(for [item-index (range 3) cat-index (range 3)]\\n                                                   \\r\\n            [item-index cat-index]))" "(filter \#((and (<\= first %) (second %))not (\= (first %) (second %)))(for [item-index (range 3) cat-index (range 3)]\\n                                                   \\r\\n            [item-index cat-index]))" "(<\= 1 0)" "(filter \#(and (<\= (first %) (second %))not (\= (first %) (second %)))(for [item-index (range 3) cat-index (range 3)]\\n                                                   \\r\\n            [item-index cat-index]))" "(filter \#(and (<\= (first %) (second %)) (not (\= (first %) (second %))))(for [item-index (range 3) cat-index (range 3)]\\n                                                   \\r\\n            [item-index cat-index]))" "(for [ cat-index (range 3)]\\n  [cat-index\\n  (filter \\n    \#(and (<\= (first %) (second %)) \\n          (not (\= (first %) (second %))))\\n    (for [item-index (range 3) item-index-2 (range 3)]\\n      \\r\\n    [item-index item-index-2]))])" "(for [ cat-index (range 3)]\\n  (concat [cat-index\\n          (filter \\n            \#(and (<\= (first %) (second %)) \\n                  (not (\= (first %) (second %))))\\n            (for [item-index (range 3) item-index-2 (range 3)]\\n              \\r\\n    [item-index item-index-2]))]))" "(for [ cat-index (range 3)]\\n   [cat-index\\n   (filter \\n     \#(and (<\= (first %) (second %)) \\n           (not (\= (first %) (second %))))\\n     (for [item-index (range 3) item-index-2 (range 3)]\\n       \\r\\n    [item-index item-index-2]))])" "(for [ cat-index (range 3)]\\n  (concat [cat-index\\n          (filter \\n            \#(and (<\= (first %) (second %)) \\n                  (not (\= (first %) (second %))))\\n            (for [item-index (range 3) item-index-2 (range 3) cat-index (range 4)]\\n              \\r\\n    [item-index item-index-2 cat-index]))]))" "\\n          (filter \\n            \#(and (<\= (first %) (second %)) \\n                  (not (\= (first %) (second %))))\\n            (for [item-index (range 3) item-index-2 (range 3) cat-index (range 4)]\\n              \\r\\n    [item-index item-index-2 cat-index]))" "\\n(defn elements-not-set [item-size cat-size decision-list]\\n  (filter \\n    \#(and (<\= (first %) (second %)) \\n          (not (\= (first %) (second %))))\\n    (for [item-index (range item-size) item-index-2 (range item-size) cat-index (range cat-size )]\\r\\n      [item-index item-index-2 cat-index]))\\n   (into \#{} \\r\\n          (map \#(subvec % 0 3) decision-list)))" "(elements-not-set [\\"one\\" \\"two\\" \\"three\\"]  [\\"one\\" \\"two\\" \\"three\\"] [[0 2 1 2] [1 2 1 2]])" "(defn elements-not-set [item-size cat-size decision-list]\\n  (s/difference \\r\\n    (into \#{}\\n          (filter \\r\\n            \#(and (<\= (first %) (second %)) \\r\\n                  (not (\= (first %) (second %))))\\r\\n    (for [item-index (range item-size) item-index-2 (range item-size) cat-index (range cat-size )]\\r\\n      [item-index item-index-2 cat-index])))\\r\\n  (into \#{} \\r\\n        (map \#(subvec % 0 3) decision-list))))" " (\\n   require '[clojure.set \:as s])" " (require '[clojure.set \:as set])" "(defn elements-not-set [item-size cat-size decision-list]\\n  (set/difference \\r\\n    (into \#{}\\n         (filter \\r\\n            \#(and (<\= (first %) (second %)) \\r\\n                  (not (\= (first %) (second %))))\\r\\n    (for [item-index (range item-size) item-index-2 (range item-size) cat-index (range cat-size )]\\r\\n      [item-index item-index-2 cat-index])))\\r\\n  (into \#{} \\r\\n        (map \#(subvec % 0 3) decision-list))))" "(elements-not-set [\\"one\\" \\"two\\" \\"three\\"]  [\\"one\\" \\"two\\" \\"three\\"] [[0 2 1 2] [1 2 1 2]])" "(defn elements-not-set [item-size cat-size decision-list]\\n  (set/difference \\r\\n    (into \#{}\\n          (filter \\r\\n            \#(and (<\= (first %) (second %)) \\r\\n                  (not (\= (first %) (second %))))\\r\\n            (for [item-index (range item-size) item-index-2 (range item-size) cat-index (range cat-size )]\\r\\n              [item-index item-index-2 cat-index])))\\r\\n    (into \#{} \\r\\n          (map \#(subvec % 0 3) decision-list))))" "(defn elements-not-set [item-size cat-size decision-list]\\n\\r\\n    (into \#{}\\n         (filter \\r\\n            \#(and (<\= (first %) (second %)) \\r\\n                  (not (\= (first %) (second %))))\\r\\n            (for [item-index (range item-size) item-index-2 (range item-size) cat-index (range cat-size )]\\r\\n              [item-index item-index-2 cat-index]))))" "(elements-not-set [\\"one\\" \\"two\\" \\"three\\"]  [\\"one\\" \\"two\\" \\"three\\"] [[0 2 1 2] [1 2 1 2]])" "(defn elements-not-set [item-size cat-size decision-list]\\n\\n         (filter \\r\\n            \#(and (<\= (first %) (second %)) \\r\\n                  (not (\= (first %) (second %))))\\r\\n            (for [item-index (range item-size) item-index-2 (range item-size) cat-index (range cat-size )]\\r\\n              [item-index item-index-2 cat-index])))" "(elements-not-set [\\"one\\" \\"two\\" \\"three\\"]  [\\"one\\" \\"two\\" \\"three\\"] [[0 2 1 2] [1 2 1 2]])" "\\n          (filter \\n            \#(and (<\= (first %) (second %)) \\n                  (not (\= (first %) (second %))))\\n            (for [item-index (range 3) item-index-2 (range 3) cat-index (range 4)]\\n              \\r\\n    [item-index item-index-2 cat-index]))" "(defn elements-not-set [item-size cat-size decision-list]\\n  (set/difference \\r\\n    (into \#{}\\n          (filter \\r\\n            \#(and (<\= (first %) (second %)) \\r\\n                  (not (\= (first %) (second %))))\\r\\n            (for [item-index (range item-size) item-index-2 (range item-size) cat-index (range cat-size )]\\r\\n              [item-index item-index-2 cat-index])))\\r\\n    (into \#{} \\r\\n          (map \#(subvec % 0 3) decision-list))))" "(elements-not-set (count [\\"one\\" \\"two\\" \\"three\\"]) (count  [\\"one\\" \\"two\\" \\"three\\"]) [[0 2 1 2] [1 2 1 2]])" "(defn get-dec-value [item-num item-num-2 cat-num decision-list] \\r\\n  \\"returns value based on position. nil if value not found\\"\\r\\n  (let [[large-index small-index] (if (< item-num item-num-2) [item-num-2 item-num] [item-num item-num-2])]\\r\\n  (first \\r\\n    (map \#(if (empty? %) [] (last %)) \\r\\n         (filter \#(and (\= item-num (first %)) (\= cat-num (second %))) decision-list)))))" "(get-dec-value 0 1 1 [[0 1 1 12]])" "(map \#(subvec % 0 3) [])" "(map \#(subvec % 0 3) [[1 1 1 1]])" "(map \#(subvec % 0 3) [])" "(into \#{} (map \#(subvec % 0 3) []))" "(into \#{} (map \#(subvec % 0 3) [[0 1 1 1]]))" "(into \#{} (map \#(subvec % 0 3) [\\n                                ]))" "(elements-not-set (count [\\"one\\" \\"two\\" \\"three\\"]) (count  [\\"one\\" \\"two\\" \\"three\\"]) [[0 2 1 2] [1 2 1 2]])" "(get-dec-value 0 2 1  [[0 2 1 2] [1 2 1 2]])" " \\r\\n(defn get-dec-value [item-num-1 item-num-2 cat-num decision-list] \\r\\n  \\"returns value based on position. nil if value not found\\"\\r\\n  (let [[large-index small-index] (if (< item-num item-num-2) [item-num-2 item-num] [item-num item-num-2])]\\r\\n  (first \\r\\n    (map \#(if (empty? %) [] (last %)) \\r\\n         (filter \#(and (\= item-num-1 (first %)) (\= item-num-2 (second %)) (\= cat-num (nth % 2))) decision-list)))))" " \\r\\n(defn get-dec-value [item-num-1 item-num-2 cat-num decision-list] \\r\\n  \\"returns value based on position. nil if value not found\\"\\r\\n  (let [[large-index small-index] (if (< item-num-1 item-num-2) [item-num-2 item-num-1] [item-num-1 item-num-2])]\\r\\n  (first \\r\\n    (map \#(if (empty? %) [] (last %)) \\r\\n         (filter \#(and (\= item-num-1 (first %)) (\= item-num-2 (second %)) (\= cat-num (nth % 2))) decision-list)))))" "(get-dec-value 0 2 1  [[0 2 1 2] [1 2 1 2]])" " \\r\\n(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list element-map]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [exclude-pos [(\:item-loc element-map) (\:cat-loc element-map)]\\r\\n        [it-n cat-n]  (rand-nth \\r\\n                        (into [] (elements-not-set \\r\\n                                   (count item-list) (count cat-list)  \\r\\n                                   (if (nil? exclude-pos)\\r\\n                                     dec-list\\r\\n                                     (conj  dec-list exclude-pos)))))]\\r\\n    {\:item-loc-1 it-n \:item-name-1 (nth item-list it-n) \\r\\n     \:item-loc-2 it-n \:item-name-2 (nth item-list it-n)\\r\\n     \:cat-loc cat-n \:cat-name (nth cat-list cat-n)})))" "(get-dec-value 0 2 1  [[0 2 1 2] [1 2 1 2]])" "(next-rand-select [[0 2 1 2] [1 2 1 2]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"])" "(elements-not-set 3 3 [[0 2 1 2] [1 2 1 2]])" "(defn elements-not-set [item-size cat-size decision-list]\\r\\n  (do (println decision-list)\\r\\n  (set/difference \\r\\n    (into \#{}\\r\\n          (filter \\r\\n            \#(and (<\= (first %) (second %)) \\r\\n                  (not (\= (first %) (second %))))\\r\\n            (for [item-index (range item-size) item-index-2 (range item-size) cat-index (range cat-size )]\\r\\n              [item-index item-index-2 cat-index])))\\r\\n    (into \#{} \\r\\n          (map \#(subvec % 0 3) decision-list)))))" "(elements-not-set 3 3 [[0 2 1 2] [1 2 1 2]])" "(next-rand-select [[0 2 1 2] [1 2 1 2]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"])" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list element-map]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [dec-list-aug (if (nil? exclude-pos)\\r\\n                       dec-list\\r\\n                       (conj  dec-list exclude-pos))\\r\\n                      [(\:item-loc element-map) (\:cat-loc element-map)]\\r\\n        \\r\\n        [it-n cat-n]  (rand-nth \\r\\n                        (into [] (elements-not-set \\r\\n                                   (count item-list) (count cat-list)  dec-list-aug )))]\\r\\n    {\:item-loc-1 it-n \:item-name-1 (nth item-list it-n) \\r\\n     \:item-loc-2 it-n \:item-name-2 (nth item-list it-n)\\r\\n     \:cat-loc cat-n \:cat-name (nth cat-list cat-n)})))" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list element-map]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [dec-list-aug (if (nil? exclude-pos)\\r\\n                       dec-list\\r\\n                       (conj  dec-list [(\:item-loc element-map) (\:cat-loc element-map)]))\\r\\n        [it-n cat-n]  (rand-nth \\r\\n                        (into [] (elements-not-set \\r\\n                                   (count item-list) (count cat-list)  dec-list-aug )))]\\r\\n    {\:item-loc-1 it-n \:item-name-1 (nth item-list it-n) \\r\\n     \:item-loc-2 it-n \:item-name-2 (nth item-list it-n)\\r\\n     \:cat-loc cat-n \:cat-name (nth cat-list cat-n)})))" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list element-map]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [dec-list-aug (if (nil? exclude-pos)\\r\\n                       dec-list\\r\\n                       (conj  dec-list [(\:item-loc-1 element-map)  (\:item-loc-2 element-map) (\:cat-loc element-map)]))\\r\\n        [it-n cat-n]  (rand-nth \\r\\n                        (into [] (elements-not-set \\r\\n                                   (count item-list) (count cat-list)  dec-list-aug )))]\\r\\n    {\:item-loc-1 it-n \:item-name-1 (nth item-list it-n) \\r\\n     \:item-loc-2 it-n \:item-name-2 (nth item-list it-n)\\r\\n     \:cat-loc cat-n \:cat-name (nth cat-list cat-n)})))" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list element-map]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [dec-list-aug (if (nil? element-map)\\r\\n                       dec-list\\r\\n                       (conj  dec-list [(\:item-loc-1 element-map)  (\:item-loc-2 element-map) (\:cat-loc element-map)]))\\r\\n        [it-n cat-n]  (rand-nth \\r\\n                        (into [] (elements-not-set \\r\\n                                   (count item-list) (count cat-list)  dec-list-aug )))]\\r\\n    {\:item-loc-1 it-n \:item-name-1 (nth item-list it-n) \\r\\n     \:item-loc-2 it-n \:item-name-2 (nth item-list it-n)\\r\\n     \:cat-loc cat-n \:cat-name (nth cat-list cat-n)})))" "(next-rand-select [[0 2 1 2] [1 2 1 2]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"])" "(get-compare [[0 2 1 2] [1 2 1 2]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"])" "(defn next-rand-compare\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list element-map]\\r\\n    \\"gets an index that has not been selected\\"\\r\\n    (let [dec-list-aug (if (nil? exclude-pos)\\r\\n                         dec-list\\r\\n                         (conj  dec-list [(\:item-loc-1 element-map)  (\:item-loc-2 element-map) (\:cat-loc element-map)]))\\r\\n          [it-n cat-n]  (rand-nth \\r\\n                          (into [] (elements-not-set \\r\\n                                     (count item-list) (count cat-list)  dec-list-aug )))]\\r\\n      {\:item-loc-1 it-n \:item-name-1 (nth item-list it-n) \\r\\n       \:item-loc-2 it-n \:item-name-2 (nth item-list it-n)\\r\\n       \:cat-loc cat-n \:cat-name (nth cat-list cat-n)})))" "(defn next-rand-select\\r\\n  ([dec-list item-list cat-list] (next-rand-select dec-list item-list cat-list nil)) \\r\\n  ([dec-list item-list cat-list element-map]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [dec-list-aug (if (nil? element-map)\\r\\n                       dec-list\\r\\n                       (conj  dec-list [(\:item-loc-1 element-map)  (\:item-loc-2 element-map) (\:cat-loc element-map)]))\\r\\n        [it-n cat-n]  (rand-nth \\r\\n                        (into [] (elements-not-set \\r\\n                                   (count item-list) (count cat-list)  dec-list-aug )))]\\r\\n    {\:item-loc-1 it-n \:item-name-1 (nth item-list it-n) \\r\\n     \:item-loc-2 it-n \:item-name-2 (nth item-list it-n)\\r\\n     \:cat-loc cat-n \:cat-name (nth cat-list cat-n)})))" "\\r\\n(defn next-rand-compare\\r\\n  ([dec-list item-list cat-list]\\r\\n  \\"gets an index that has not been selected\\"\\r\\n  (let [[it-n cat-n]  (rand-nth \\r\\n                        (into [] \\r\\n                              (elements-not-set (count item-list) (count cat-list) dec-list)))]\\r\\n    {\:item-loc-1 it-n \:item-name-1 (nth item-list it-n) \\r\\n     \:item-loc-2 it-n \:item-name-2 (nth item-list it-n)\\r\\n     \:cat-loc cat-n \:cat-name (nth cat-list cat-n)})))" "(next-rand-compare [[0 2 1 2] [1 2 1 2]] [\\"one\\" \\"two\\" \\"three\\"] [\\"one\\" \\"two\\" \\"three\\"])" "(elements-not-set 3 3 [[0 2 1 2] [1 2 1 2]])" "(for [values [\:item-loc-1 \:item-loc-2 \:cat-loc \:result]]\\n  (values {\:item-loc-1 1  \:item-loc-2 2 \:cat-loc 3 \:result 4}))" "(into [] (for [values [\:item-loc-1 \:item-loc-2 \:cat-loc \:result]]\\n           (values {\:item-loc-1 1  \:item-loc-2 2 \:cat-loc 3 \:result 4})))" "(into [] (for [values [\:item-loc-1 \:item-loc-2 \:cat-loc \:result]]\\n           (values {\:cat-loc 3 \:item-loc-1 1  \:item-loc-2 2  \:result 4})))" "(require '[garden.core \:refer [css]])" "(css \:.current-label {\:float 'right})" "(css \:.current-label {\:float \\"right\\"})" "(css [\:.current-label {\:float \\"right\\"}])" "  (require '[garden.def \:refer [defstylesheet defstyles]]\\r\\n            '[garden.units \:refer [px]])" "(defstylesheet screen\\r\\n  {\:output-to \\"resources/public/screen.css\\"}\\r\\n  [\:body\\r\\n   {\:font-family \\"sans-serif\\"\\r\\n    \:font-size (px 16)\\r\\n    \:line-height 1.5}])" "(defstylesheet screen\\r\\n  {\:output-to \\"resources/public/style/screen.css\\"}\\r\\n   [\:.current-header-label {\:float \\"right\\"}])" "(defstylesheet static-styles\\r\\n  {\:output-to \\"resources/public/style/staticStyles.css\\"}\\r\\n   [\:.current-header-label {\:float \\"right\\"}])" "(defstylesheet static-styles\\r\\n  {\:output-to \\"resources/public/style/staticStyles.css\\"}\\r\\n   [\:.current-header-label {\:float \\"right\\"}]\\r\\n   [\:.title-header-label {\:float \\"left\\"}])" "\\r\\n(defstylesheet static-styles\\r\\n  {\:output-to \\"resources/public/style/staticStyles.css\\"}\\r\\n   [\:.current-header-label {\:float \\"right\\"}]\\r\\n   [\:.title-header-label {\:float \\"left\\"}]\\r\\n   [\:.header-table {\:width \\"100%\\"}])" "(defstylesheet static-styles\\r\\n  {\:output-to \\"resources/public/style/staticStyles.css\\"}\\r\\n   [\:.current-header-label {\:float \\"right\\"\\r\\n                            \:marign-right \\"10px\\"}]\\r\\n   [\:.title-header-label {\:float \\"left\\"}]\\r\\n   [\:.header-table {\:width \\"100%\\"}])" "(defstylesheet static-styles\\r\\n  {\:output-to \\"resources/public/style/staticStyles.css\\"}\\r\\n   [\:.current-header-label {\:float \\"right\\"\\r\\n                            \:padding-right \\"10px\\"}]\\r\\n   [\:.title-header-label {\:float \\"left\\"}]\\r\\n   [\:.header-table {\:width \\"100%\\"}])" "(defstylesheet static-styles\\r\\n  {\:output-to \\"resources/public/style/staticStyles.css\\"}\\r\\n   [\:.current-header-label {\:float \\"right\\"\\r\\n                            \:padding-right \\"10px\\"}]\\r\\n   [\:.title-header-label {\:float \\"left\\"\\r\\n                          \:padding-left \\"10px\\"}]\\r\\n   [\:.header-table {\:width \\"100%\\"}])" " ( def g-options {\\r\\n                     \:id \\"Style\\"\\r\\n                     \:source-paths [\\"src\\"]\\r\\n                     \:stylesheet client.styles\\r\\n                     \:compiler {\\r\\n                                \:output-to \\"resources/public/style/screen.css\\"\\r\\n                                \:pretty-print? true}})" " ( def g-options {\\r\\n                     \:id \\"Style\\"\\r\\n                     \:source-paths [\\"src\\"]\\r\\n                     \:stylesheet 'client.styles\\r\\n                     \:compiler {\\r\\n                                \:output-to \\"resources/public/style/screen.css\\"\\r\\n                                \:pretty-print? true}})" "garden.compiler/" "(garden.compiler/compile-css \\n[\:.current-header-label {\:float \\"right\\"\\r\\n                            \:padding-right \\"10px\\"}])" "\\n(defstylesheet static-styles\\r\\n  {\:output-to \\"resources/public/style/staticStyles.css\\"}\\r\\n   [\:.current-header-label {\:float \\"right\\"\\r\\n                            \:padding-right \\"10px\\"}]\\r\\n   [\:.title-header-label {\:float \\"left\\"\\r\\n                          \:padding-left \\"10px\\"}]\\r\\n   [\:.header-table {\:width \\"100%\\"}])" "(static-styles)" "\\n(macroexpand '(defstylesheet static-styles\\r\\n  {\:output-to \\"resources/public/style/staticStyles.css\\"}\\r\\n   [\:.current-header-label {\:float \\"right\\"\\r\\n                            \:padding-right \\"10px\\"}]\\r\\n   [\:.title-header-label {\:float \\"left\\"\\r\\n                          \:padding-left \\"10px\\"}]\\r\\n   [\:.header-table {\:width \\"100%\\"}]))" "(defn comp-static-styles []\\r\\n  (garden.core/css {\:output-to \\"resources/public/style/staticStyles.css\\"} \\r\\n                   style/static-styles ))" "\\r\\n  (require \\r\\n            '[client.styles \:as style])" "(comp-static-styles)" "\:@test" "(comp-static-styles)" "\=> (comp-static-styles)" "(if false \\"test\\")" "\=> (comp-static-styles)" "(d/div {} )" "(quote (test) (test))" "(quote (test) (tesdt))" "\=> (comp-static-styles)" "(filter (\= \:select %) [\:select \:stuff])" "(+ 1 1)" "(filter \#(\= \:select %) [\:select \:stuff])" "(not-empty (filter \#(\= \:select %) [\:select \:stuff]))" "(empty? (filter \#(\= \:select %) [\:select \:stuff]))" "(not (empty? (filter \#(\= \:select %) [\:select \:stuff])))" "(comp-static-styles)" "(+ 1 1)" "(defn my-add [x y] (+ x y))" "(my-add (my-add 1 3)  (my-add 1 3))" "(rest [1 2 3 4 5 6 67 7 7 88])" "(first [1 2 3 4 5 6 67 7 7 88])" "(first [1 2 34] )" "(second [1 2 4])" "(interleave [1 3 4] [5 5 5])" "(+ (interleave [1 3 4] [5 5 5]))" "(apply + (interleave [1 3 4] [5 5 5]))" "(apply + [1 5 3 5 4 5])" "(comp-static-styles)" "(conj [\\"one\\"] \\"two\\")" "(comp-static-styles)" "(require '[datascript \:as d])" "(let [schema {\:aka {\:db/cardinality \:db.cardinality/many}}\\r\\n      conn   (d/create-conn schema)]\\r\\n  (d/transact\! conn [ { \:db/id -1\\r\\n                        \:name  \\"Maksim\\"\\r\\n                        \:age   45\\r\\n                        \:aka   [\\"Maks Otto von Stirlitz\\", \\"Jack Ryan\\"] } ])\\r\\n  (d/q '[ \:find  ?n ?a\\r\\n          \:where [?e \:aka \\"Maks Otto von Stirlitz\\"]\\r\\n                 [?e \:name ?n]\\r\\n                 [?e \:age  ?a] ]\\r\\n       @conn))" "\\r\\n(defn progress-format [comp-perc]\\r\\n  (cond\\r\\n    (\= 0 comp-perc)\\r\\n    \\"Not Started\\"\\r\\n    (\= 100 comp-perc)\\r\\n    \\"Completed\\"\\r\\n    \:default\\r\\n    (str comp-perc \\" Completed\\")))\\r\\n    \\r\\n(defn stand-name [nav-key type-key]\\r\\n  \\"Standardized names based on nav type\\"\\r\\n  (cond \\r\\n    (\= type-key \:list)\\r\\n    (keyword (str (name nav-key) \\"-list\\"))\\r\\n    (\= type-key \:edit) \\r\\n    (str (name nav-key) \\"-edit\\")\\r\\n    (\= type-key \:edit-nav)\\r\\n    (keyword (str (name nav-key) \\"-edit\\"))\\r\\n    (\= type-key \:save-nav) \\r\\n    (keyword (str (name nav-key) \\"-save\\"))))" "(defn get-local-dec-list []\\r\\n  \\"currently a stub\\r\\n   Summary of decisions saved by user\\"\\r\\n  [{\:name \\"car\\" \:ref-key 1 \:progress \\"80\\"} {\:name \\"Truck\\" \:ref-key 1 \:progress \\"80\\"}])" "(get-local-dec-list)" "(fn [x] (* x x))" "(defprotocol test one)" "(defprotocol test. one)" "(defrecord test one)" "(defrecord test [one])" "(defrecord test [\:one])" "(defrecord  [\:one])" "(defrecord  mytest [\:one])" "(defrecord  mytest [one])" "(mytest 1)" "(mytest. 1)" "(defrecord item-label {name name-id})" "(defrecord item-label [name name-id])" "(item-label. \\"one\\" 44)" "(item-label. \\"one two three\\" 44)" "(item-label. \\"one\\" 44)" "(defrecord simple-item [name name-id])" "(simple-item. \\"test\\" 23)" "(def si (simple-item. \\"test\\" 23))" "(class si)" "(. split \\".\\" (class si))" "(. split \\".\\" (str (class si)))" "\\n(str (class si))" "\\n(. (str (class si)) split \\".\\")" "\\n(last (. (str (class si)) split \\".\\"))" "\\n(first (. (str (class si)) split \\".\\"))" "\\n(first (. (str (class si)) split \\"[.]\\"))" "\\n(last (. (str (class si)) split \\"[.]\\"))" "(simple-item. \\"test\\" 23)" "(\:name (simple-item. \\"test\\" 23))" "(defrecord simple-item [name name-id])\\r\\n(defrecord decision-item [name name-id complete])\\r\\n(defrecord category-item [name name-id weight])\\r\\n(defrecord decision-result [item-one item-two category result])" "(defrecord complex-type [decision-item category-item])" "(complex-type. (decision-item. \\"test\\" 23)\\n               (category-item. \\"teting\\" 45 40))" "(simple-item. \\"test\\" 4)" "(decision-item. \\"test\\" 23)" "(decision-item. \\"test\\" 23 1)" "(complex-type. (decision-item. \\"test\\" 23 8)\\n               (category-item. \\"teting\\" 45 40))" "(decision-data [name\\n                key\\n                itme-list\\n                catagory-list\\n                decision-result-list])" "(defrecord decision-data [name\\n                     key\\n                     itme-list\\n                     catagory-list\\n                     decision-result-list])" "(conj {} \:one 1 \:two 2)" "(assoc {} \:one 1 \:two 2)" "(defrecord one [s])" "(ns client.tools)\\r\\n\\r\\n;map standardizations\\r\\n(defrecord summary-decision [name \\r\\n                             name-id\\r\\n                             perc-comp])\\r\\n\\r\\n(defrecord category [name \\r\\n                     weight])\\r\\n\\r\\n(defrecord item [name])\\r\\n\\r\\n(defrecord decision-result [item-one \\r\\n                            item-two \\r\\n                            category \\r\\n                            result])\\r\\n\\r\\n(defrecord decision-data [name\\r\\n                          key\\r\\n                          perc-comp\\r\\n                          item-list\\r\\n                          catagory-list\\r\\n                          decision-result-list])" "(require '[core.async \:as a])" "(require '[org.clojure/clojure\\n           \:as a])" "(require '[org.clojure/core.async\:as a])" "(require '[org.clojure/core.async \:as a])" "(require '[core.async \:as a])" "(t/decision-result. 1 2 1 1)" "(decision-result. 1 2 1 1)" "(defrecord decision-result [item-one \\r\\n                            item-two \\r\\n                            category \\r\\n                            result])" "(decision-result. 1 2 1 1)" "(decision-result. 1 2 1 nil)" "(assoc (decision-result. 1 2 1 nil) \:result 4)" "(map \#([(\:item-one %) (\:item-two %) (\:catagory %)]) [{\:item-one 1 \:item-two 2 \:catagory 3}])" "(map \#(println %) [{\:item-one 1 \:item-two 2 \:catagory 3}])" "(map \#(println (\:item-one %)) [{\:item-one 1 \:item-two 2 \:catagory 3}])" "(map \#(println [(\:item-one %)]) [{\:item-one 1 \:item-two 2 \:catagory 3}])" "(map \#([(\:item-one %)]) [{\:item-one 1 \:item-two 2 \:catagory 3}])" "(map \#(vec (\:item-one %)) [{\:item-one 1 \:item-two 2 \:catagory 3}])" "(map \#(vector (\:item-one %)) [{\:item-one 1 \:item-two 2 \:catagory 3}])" "(map \#(vector (\:item-one %) (\:item-two %) (\:catagory %)) [{\:item-one 1 \:item-two 2 \:catagory 3}])" "(let [schema {\:aka {\:db/cardinality \:db.cardinality/many}}\\r\\n      conn   (d/create-conn schema)]\\r\\n  (d/transact\! conn [ { \:db/id -1\\r\\n                        \:name  \\"Maksim\\"\\r\\n                        \:age   45\\r\\n                        \:aka   [\\"Maks Otto von Stirlitz\\", \\"Jack Ryan\\"] } ])\\r\\n  (d/q '[ \:find  ?n ?a\\r\\n          \:where [?e \:aka \\"Maks Otto von Stirlitz\\"]\\r\\n                 [?e \:name ?n]\\r\\n                 [?e \:age  ?a] ]\\r\\n       @conn))" "  (require '[datascript])" "(let [schema {\:aka {\:db/cardinality \:db.cardinality/many}}\\r\\n      conn   (d/create-conn schema)]\\r\\n  (d/transact\! conn [ { \:db/id -1\\r\\n                        \:name  \\"Maksim\\"\\r\\n                        \:age   45\\r\\n                        \:aka   [\\"Maks Otto von Stirlitz\\", \\"Jack Ryan\\"] } ])\\r\\n  (d/q '[ \:find  ?n ?a\\r\\n          \:where [?e \:aka \\"Maks Otto von Stirlitz\\"]\\r\\n                 [?e \:name ?n]\\r\\n                 [?e \:age  ?a] ]\\r\\n       @conn))" "  (require '[datascript \:as d])" "(let [schema {\:aka {\:db/cardinality \:db.cardinality/many}}\\r\\n      conn   (d/create-conn schema)]\\r\\n  (d/transact\! conn [ { \:db/id -1\\r\\n                        \:name  \\"Maksim\\"\\r\\n                        \:age   45\\r\\n                        \:aka   [\\"Maks Otto von Stirlitz\\", \\"Jack Ryan\\"] } ])\\r\\n  (d/q '[ \:find  ?n ?a\\r\\n          \:where [?e \:aka \\"Maks Otto von Stirlitz\\"]\\r\\n                 [?e \:name ?n]\\r\\n                 [?e \:age  ?a] ]\\r\\n       @conn))" "(defn perform-query [query]\\r\\n  (let [schema {\:aka {\:db/cardinality \:db.cardinality/many}}\\r\\n         conn   (d/create-conn schema)]\\r\\n    (d/q query @conn)))" "(perform-query '[ \:find  ?n ?a\\r\\n          \:where [?e \:aka \\"Maks Otto von Stirlitz\\"]\\r\\n                 [?e \:name ?n]\\r\\n                 [?e \:age  ?a]]J)" "(perform-query '[ \:find  ?n ?a\\r\\n          \:where [?e \:aka \\"Maks Otto von Stirlitz\\"]\\r\\n                 [?e \:name ?n]\\r\\n                 [?e \:age  ?a]])" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\r\\n    \:entry/child        {\:db/cardinality \:db.cardinality/many\\r\\n                         \:db/valueType   \:db.type/ref}\\r\\n    \:entry/first-child  {\:db/valueType   \:db.type/ref} })\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\r\\n                                 [\:db/add 1 \:entry/child 2]\\r\\n                                 [\:db/add 1 \:entry/child 3]\\r\\n                                 [\:db/add 1 \:entry/first-child 2]])))" "(datascript/q '[\:find ?entity ?attr ?value\\r\\n                \:in $ [[?attr [[?aprop ?avalue] ...]] ...]\\r\\n                \:where [(\= ?avalue \:db.cardinality/many)]\\r\\n                       [?entity ?attr ?value]]\\r\\n              db (\:schema db))" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\r\\n    \:entry/child        {\:db/cardinality \:db.cardinality/many\\r\\n                         \:db/valueType   \:db.type/ref}\\r\\n    \:entry/first-child  {\:db/valueType   \:db.type/ref} })\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\r\\n                                 [\:db/add 1 \:entry/child 2]\\r\\n                                 [\:db/add 1 \:entry/child 3]\\r\\n                                 [\:db/add 1 \:entry/first-child 2]\\n                                 [\:db/add 1 \:entry/first-child 2]])))" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\r\\n    \:entry/first-child  {\:db/valueType   \:db.type/int} })" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\r\\n    \:entry/stringval  {\:db/valueType   \:db.type/int} })" "(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\n                                 [\:db/add 1 \:entry/stringval \\"wtf\\"]])))" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\r\\n    \:entry/stringval  {\:db/valueType   \:db.type/string} })" "(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\n                                 [\:db/add 1 \:entry/stringval \\"wtf\\"]])))" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\r\\n    \:entry/stringval  {\:db/valueType   \:attribute }})" "(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\n                                 [\:db/add 1 \:entry/stringval \\"wtf\\"]])))" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\r\\n    \:entry/stringval  {\:value}})" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\r\\n    \:entry/stringval  {\:db/valueType   \:db.type/ref}})" "(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\n                                 [\:db/add 1 \:entry/stringval 2]])))" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\r\\n    \:entry/stringval  {\:db/valueType   \:value}})" "(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\n                                 [\:db/add 1 \:entry/stringval 2]])))" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}})" "(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\n                                 [\:db/add 1 \:entry/stringval 2]])))" "(datascript/q '[\:find ?value\\r\\n                \:where [?e \:entry/stringval ?value]]\\r\\n              db )" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\n   \:entry/stringvalue   {}})" "(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\n                                 [\:db/add 1 \:entry/stringval 2]])))" "(datascript/q '[\:find ?value\\r\\n                \:where [?e \:entry/stringval ?value]]\\r\\n              db )" "(def schema\\r\\n  { \:entry/id           {\:db/unique      \:db.unique/identity}\\n   \:entry/stringvalue   {}})" "(def db (-> (datascript/empty-db schema)\\r\\n            (datascript/db-with [[\:db/add 1 \:entry/id \\"a\\"]\\n                                 [\:db/add 1 \:entry/stringval 4]])))" "(datascript/q '[\:find ?value\\r\\n                \:where [?e \:entry/stringval ?value]]\\r\\n              db )" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" " (require  '[client.tools \:as t])" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(t/item. \\"Civic\\")" " (require  '[client.tools \:as t])" "(t/item. \\"Civic\\")" "(item. \\"Civic\\")" "(defrecord summary-decision [name \\r\\n                             name-id\\r\\n                             perc-comp])\\r\\n\\r\\n(defrecord category [name \\r\\n                     weight])\\r\\n\\r\\n(defrecord item [name])\\r\\n\\r\\n(defrecord decision-result [item-one \\r\\n                            item-two \\r\\n                            category \\r\\n                            result])\\r\\n\\r\\n(defrecord decision-data [name\\r\\n                          key\\r\\n                          perc-comp\\r\\n                          item-list\\r\\n                          category-list\\r\\n                          decision-result-list])\\r\\n\\r\\n(defn progress-format [comp-perc]\\r\\n  (cond\\r\\n    (\= 0 comp-perc)\\r\\n    \\"Not Started\\"\\r\\n    (\= 100 comp-perc)\\r\\n    \\"Completed\\"\\r\\n    \:default\\r\\n    (str comp-perc \\" Completed\\")))\\r\\n    \\r\\n(defn stand-name [nav-key type-key]\\r\\n  \\"Standardized names based on nav type\\"\\r\\n  (cond \\r\\n    (\= type-key \:list)\\r\\n    (keyword (str (name nav-key) \\"-list\\"))\\r\\n    (\= type-key \:edit) \\r\\n    (str (name nav-key) \\"-edit\\")\\r\\n    (\= type-key \:edit-nav)\\r\\n    (keyword (str (name nav-key) \\"-edit\\"))\\r\\n    (\= type-key \:save-nav) \\r\\n    (keyword (str (name nav-key) \\"-save\\"))))" "(item. \\"Civic\\")" "(t/item. \\"Civic\\")" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(datascript/q '[\:find ?value\\r\\n                \:where [?e \:decision/name ?value]]\\r\\n              db )" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id \\"2\\"]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]]\\n                              [[\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]]))" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]]\\n                              [[\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]\\n                              [\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]\\n                              ])))" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]\\n                              [\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [\\n                              [\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]\\n                              [\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id \\"2\\"]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                '[(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                '[(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                '[(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id \\"2\\"]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                '[(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                '[(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                '[(t/decision-result. 1 2 1 1)]]])))" "(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                '[(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                '[(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                '[(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                '[(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                '[(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                '[(t/decision-result. 1 2 1 1)]]])))" "(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                2 ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                2]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                2]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                2  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                2]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                2]])))" "(datascript/q '[\:find ?value\\r\\n                \:where [?e \:decision/name ?value]]\\r\\n              db )" "(map \#(t/summary-decision. % 10 80)\\n     (datascript/q '[\:find ?value\\r\\n                   \:where [?e \:decision/name ?value]]))" "(map \#(t/summary-decision. (first %) 10 80)\\n     (datascript/q '[\:find ?value\\r\\n                   \:where [?e \:decision/name ?value]]))" "(map \#(println %)\\n     (datascript/q '[\:find ?value\\r\\n                   \:where [?e \:decision/name ?value]]))" "(map \#(t/summary-decision. (first %) 10 80)\\n     (datascript/q '[\:find ?value\\r\\n                   \:where [?e \:decision/name ?value]] db))" "(into [] \\n      (map \#(t/summary-decision. (first %) 10 80)\\n           (datascript/q '[\:find ?value\\r\\n                   \:where [?e \:decision/name ?value]] db)))" "  (defn get-local-decision [dec-key]\\r\\n    \\"get all information for a decision\\" \\r\\n    (into [] \\r\\n           (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                           $ \:in ?key\\r\\n                   \:where [[?e \:decision/id ?key]\\r\\n                           [?e \:decision/name ?name]\\r\\n                           [?e \:decision/item-list ?item-list]\\r\\n                           [?e \:decision/category-list ?category-list]\\r\\n                           [?e \:decision/decision-result-list ?decision-result-list]]] db dec-key)))" "(get-local-decision 2)" "  (defn get-local-decision [dec-key]\\r\\n    \\"get all information for a decision\\" \\r\\n    (into [] \\r\\n           (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                           $ \:in ?key\\r\\n                   \:where [?e \:decision/id ?key]\\r\\n                           [?e \:decision/name ?name]\\r\\n                           [?e \:decision/item-list ?item-list]\\r\\n                           [?e \:decision/category-list ?category-list]\\r\\n                           [?e \:decision/decision-result-list ?decision-result-list]] db dec-key)))" "(get-local-decision 2)" "  (defn get-local-decision [dec-key]\\r\\n    \\"get all information for a decision\\" \\r\\n    (into [] \\r\\n           (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                           \:in $ ?key\\r\\n                   \:where [?e \:decision/id ?key]\\r\\n                           [?e \:decision/name ?name]\\r\\n                           [?e \:decision/item-list ?item-list]\\r\\n                           [?e \:decision/category-list ?category-list]\\r\\n                           [?e \:decision/decision-result-list ?decision-result-list]] db dec-key)))" "(get-local-decision 2)" "(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id \\"1\\"]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id \\"2\\"]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]  ]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))" "(get-local-decision 2)" "(t/->decision-data (get-local-decision 2))" "(t/decision-data (get-local-decision 2))" "(decision-data (get-local-decision 2))" "(decision-data. (get-local-decision 2))" "(apply decision-data. (get-local-decision 2))" "(defrecord decision-data [name\\r\\n                          key\\r\\n                        ;  perc-comp\\r\\n                          item-list\\r\\n                          category-list\\r\\n                          decision-result-list])" "(apply decision-data. (get-local-decision 2))" "(decision-data. 1 1 1 1 1)" "(apply decision-data. (get-local-decision 2))" "(let [val (get-local-decision 2)]\\n  (first val))" "(let [val (first (get-local-decision 2))]\\n  (first val))" "(let [val (first (get-local-decision 2))]\\n  (decision-data. (first val) (second val) (nth val 3) (nth val 4)))" "(let [val (first (get-local-decision 2))]\\n  (decision-data. (first val) (second val) (nth val 2) (nth val 3)))" "(let [val (first (get-local-decision 2))]\\n  (decision-data. 1 1 1 1 1))" "(let [val (first (get-local-decision 2))]\\n  (decision-data. (nth val 0) 1 1 1 1))" "(let [val (first (get-local-decision 2))]\\n  (decision-data. (nth val 0) (nth val 1) 1 1 1))" "(let [val (first (get-local-decision 2))]\\n  (decision-data. (nth val 0) (nth val 1) (nth val 2) (nth val 3) (nth val 4)))" "  (defn get-local-dec-list []\\r\\n   (into [] \\r\\n      (map \#(t/summary-decision. (first %) 10 80)\\r\\n           (datascript/q '[\:find ?value\\r\\n                   \:where [?e \:decision/name ?value]] db))))" " (require '[datascript \:as d])\\n (required  '[client.tools \:as t])\\r\\n  \\r\\n\\r\\n(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"F150\\") \\r\\n                                 (t/item. \\"Ram\\")\\r\\n                                 (t/item. \\"Tahoe\\")]]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))\\r\\n\\r\\n  (defn get-local-dec-list []\\r\\n   (into [] \\r\\n      (map \#(t/summary-decision. (first %) 10 80)\\r\\n           (datascript/q '[\:find ?value\\r\\n                   \:where [?e \:decision/name ?value]] db))))\\r\\n\\r\\n  (defn get-local-decision [dec-key]\\r\\n    \\"get all information for a decision\\" \\r\\n    (let [val (first \\r\\n                (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                                \:in $ ?key\\r\\n                                \:where [?e \:decision/id ?key]\\r\\n                                [?e \:decision/name ?name] \\r\\n                                [?e \:decision/item-list ?item-list]\\r\\n                                [?e \:decision/category-list ?category-list]\\r\\n                                [?e \:decision/decision-result-list ?decision-result-list]] db dec-key))]\\r\\n      (t/decision-data. (nth val 0) (nth val 1) (nth val 2) (nth val 3) (nth val 4))))" " (require '[datascript \:as d])\\n (require  '[client.tools \:as t])\\r\\n  \\r\\n\\r\\n(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"F150\\") \\r\\n                                 (t/item. \\"Ram\\")\\r\\n                                 (t/item. \\"Tahoe\\")]]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))\\r\\n\\r\\n  (defn get-local-dec-list []\\r\\n   (into [] \\r\\n      (map \#(t/summary-decision. (first %) 10 80)\\r\\n           (datascript/q '[\:find ?value\\r\\n                   \:where [?e \:decision/name ?value]] db))))\\r\\n\\r\\n  (defn get-local-decision [dec-key]\\r\\n    \\"get all information for a decision\\" \\r\\n    (let [val (first \\r\\n                (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                                \:in $ ?key\\r\\n                                \:where [?e \:decision/id ?key]\\r\\n                                [?e \:decision/name ?name] \\r\\n                                [?e \:decision/item-list ?item-list]\\r\\n                                [?e \:decision/category-list ?category-list]\\r\\n                                [?e \:decision/decision-result-list ?decision-result-list]] db dec-key))]\\r\\n      (t/decision-data. (nth val 0) (nth val 1) (nth val 2) (nth val 3) (nth val 4))))" "(require '[datascript \:as d])\\r\\n(require '[client.tools \:as t])\\n\\r\\n  \\r\\n\\r\\n(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n\\r\\n(def db (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                                [(t/item. \\"Sentra\\") \\r\\n                                 (t/item. \\"Civic\\")\\r\\n                                 (t/item. \\"Soal\\") \\r\\n                                 (t/item. \\"Jetta\\")\\r\\n                                 (t/item. \\"A4\\")]]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n          (datascript/db-with [[\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"F150\\") \\r\\n                                 (t/item. \\"Ram\\")\\r\\n                                 (t/item. \\"Tahoe\\")]]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" nil)\\r\\n                                 (t/category. \\"Acceleration\\" nil)\\r\\n                                 (t/category. \\"Comfort\\" nil)\\r\\n                                 (t/category. \\"Style\\" nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))\\r\\n\\r\\n  (defn get-local-dec-list []\\r\\n   (into [] \\r\\n      (map \#(t/summary-decision. (first %) (second %) 80)\\r\\n           (datascript/q '[\:find ?value ?id\\r\\n                   \:where [?e \:decision/name ?value]\\r\\n                          [?e \:decision/id ?id]] db))))\\r\\n\\r\\n  (defn get-local-decision [dec-key]\\r\\n    \\"get all information for a decision\\" \\r\\n    (let [val (first \\r\\n                (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                                \:in $ ?key\\r\\n                                \:where [?e \:decision/id ?key]\\r\\n                                [?e \:decision/name ?name] \\r\\n                                [?e \:decision/item-list ?item-list]\\r\\n                                [?e \:decision/category-list ?category-list]\\r\\n                                [?e \:decision/decision-result-list ?decision-result-list]] db dec-key))]\\r\\n      (t/decision-data. (nth val 0) (nth val 1) (nth val 2) (nth val 3) (nth val 4))))" "(require 'datascript)\\r\\n   (require '[client.tools])" "(require 'datascript)\\r\\n   (require 'client.tools)" "\\r\\n  (require '[datascript \:as d])\\r\\n  (require '[client.tools \:as t])\\r\\n  \\r\\n\\r\\n(def schema\\r\\n  [{\:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}}\\n   \\n   {\:decision/id  {\:db/valueType \:db.type/ref}\\r\\n   \:item/name {}\\n   \:item/wieght {}}\\n\\n   {\:decision/id   {\:db/valueType \:db.type/ref}\\r\\n   \:category/name {}\\n   \:category/wieght {}}\\n   \\n   {\:decision/id {\:db/valueType \:db.type/ref}\\n    \:rule/decision-item-one {\:db/valueType \:db.type/ref}\\n    \:rule/decision-item-two {\:db/valueType \:db.type/ref}\\n    \:rule/category {\:db/valueType \:db.type/ref}\\n    \:rule/decision-result {\:db/valueType \:db.type/ref}}\\n   ])" "\\r\\n  (require 'datascript)\\r\\n  (require 'client.tools)\\r\\n  \\r\\n\\r\\n(def schema\\r\\n  [{\:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}}\\n   \\n   {\:decision/id  {\:db/valueType \:db.type/ref}\\r\\n   \:item/name {}\\n   \:item/wieght {}}\\n\\n   {\:decision/id   {\:db/valueType \:db.type/ref}\\r\\n   \:category/name {}\\n   \:category/wieght {}}\\n   \\n   {\:decision/id {\:db/valueType \:db.type/ref}\\n    \:rule/decision-item-one {\:db/valueType \:db.type/ref}\\n    \:rule/decision-item-two {\:db/valueType \:db.type/ref}\\n    \:rule/category {\:db/valueType \:db.type/ref}\\n    \:rule/decision-result {\:db/valueType \:db.type/ref}}\\n   ])" "\\r\\n  (require 'datascript)\\r\\n  (require 'client.tools)" "\\r\\n  (require 'client.tools)" "\\r\\n(def db-norm\\r\\n  (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1  \:item/id 1]\\r\\n                               [\:db/add 1  \:item/name \\"Sentra\\"]\\r\\n                               [\:db/add 1  \:item/sequence 1 ]])))" " (let [db (d/db-with \\n            (d/empty-db {\:name { \:db/unique \:db.unique/identity }\\r\\n                                 \:friend  { \:db/valueType \:db.type/ref }})\\r\\n            [{\:db/id 1 \:name \\"Ivan\\"}\\r\\n             {\:db/id 2 \:name \\"Petr\\"}])]\\n   db)" "(let [db (d/db-with \\r\\n               (d/empty-db {\:name { \:db/unique \:db.unique/identity }\\r\\n                                    \:friend  { \:db/valueType \:db.type/ref }})\\r\\n               [{\:db/id 1 \:name \\"Ivan\\"}\\r\\n                {\:db/id 2 \:name \\"Petr\\"}\\n                {\:db/id 3 \:name \\"don\\"}])]\\r\\n      db)" "(def schema-normal\\r\\n  [{\:user/id {\:db/unique \:db.unique/identity}\\r\\n    \:user/name {}}\\r\\n   \\r\\n   {\:decision/id {\:db/unique \:db.unique/identity}\\r\\n    \:user/id {\:db/valueType \:db.type/ref}\\r\\n    \:decision/name {}}])" "(def schema-normal\\r\\n  [{\:user/name {}}\\r\\n   \\r\\n   {\:user/id {\:db/valueType \:db.type/ref}\\r\\n    \:decision/name {}}])" "(def schema\\n  {\:db/id 1 \:name \\"Car\\"}" "(def schema-normal\\r\\n     [{\:user/name {}}\\r\\n      \\r\\n\\r\\n      { \:decision/name {}}])" "(def schema-normal\\r\\n  [{\:user/name {}}\\r\\n   {\:user/id {\:db/valueType \:db.type/ref}\\r\\n    \:decision/name {}}])" "(def schema\\n  [[\:db/id 1 \:user/name \\"Don\\"]\\n   [\:db/id 1 \:user/id 1 \:decision/name \\"Truck\\"]])" "(def schema\\r\\n  [{\:user/name {}}\\r\\n   {\:user/id {\:db/valueType \:db.type/ref}\\r\\n    \:decision/name {}}])" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/id 1 \:user/name \\"Don\\"]\\n       [\:db/id 1 \:user/id 1 \:decision/name \\"Truck\\"]])))" "(def schema\\r\\n  {{\:user/name {}}\\r\\n   {\:user/id {\:db/valueType \:db.type/ref}\\r\\n    \:decision/name {}}})" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/id 1 \:user/name \\"Don\\"]\\n       [\:db/id 1 \:user/id 1 \:decision/name \\"Truck\\"]])))" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\n       [\:db/add 1 \:user/id 1 \:decision/name \\"Truck\\"]])))" "db" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\n       [\:db/add 1 \:user/id 1 \:decision/name \\"Truck\\"]\\n       [\:db/add 2 \:user/id 1 \:decision/name \\"Car\\"]])))" "db" "(def schema\\r\\n  {{\:user/name {}}\\r\\n   {\:user/id {\:db/valueType \:db.type/ref}\\r\\n    \:decision/name {}}\\n   {\:item/name {}\\n    \:item/wieght{}}})" "(def schema\\r\\n  {{\:user/name {}}\\r\\n   {\:user/id {\:db/valueType \:db.type/ref}\\r\\n    \:decision/name {}}\\n   {\:item/name {}\\n    \:item/wieght {}}})" "(def schema\\r\\n  [{\:user/name {}}\\r\\n   {\:user/id {\:db/valueType \:db.type/ref}\\r\\n    \:decision/name {}}\\n   {\:item/name {}\\n    \:item/wieght {}}])" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\n       [\:db/add 1 \:user/id 1 \:decision/name \\"Truck\\"]\\n       [\:db/add 2 \:user/id 1 \:decision/name \\"Car\\"]])))" "(def schema\\r\\n  {{\:user/name {}}\\r\\n   {\:user/id {\:db/valueType \:db.type/ref}\\r\\n    \:decision/name {}}\\n   {\:item/name {}\\n    \:item/wieght {}}})" "(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}\\n   \:user/name {}\\r\\n   \:user/id {\:db/valueType \:db.type/ref}\\n   \:decision/id {\:db/unique \:db.unique/identity}\\n   \:decision/user-id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/name {} \\n   \:item/decision-id {\:db/valueType \:db.type/ref}\\n   \:item/name {}\\n   \:item/wieght {}\\n   \:category/decision-id {\:db/valueType \:db.type/ref}\\n   \:category/name {}\\n   \:category/wieght {}\\n   \:rule/decision-id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item-one {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item-two {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category {\:db/valueType \:db.type/ref}\\r\\n   \:rule/result {\:db/valueType \:db.type/ref}})" "(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}\\n   \:user/name {}\\r\\n   \:decision/user-id {\:db/valueType \:db.type/ref}\\n   \:decision/id {\:db/unique \:db.unique/identity}\\n   \:decision/user-id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/name {} \\n   \:item/decision-id {\:db/valueType \:db.type/ref}\\n   \:item/name {}\\n   \:item/wieght {}\\n   \:category/decision-id {\:db/valueType \:db.type/ref}\\n   \:category/name {}\\n   \:category/wieght {}\\n   \:rule/decision-id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item-one {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item-two {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category {\:db/valueType \:db.type/ref}\\r\\n   \:rule/result {\:db/valueType \:db.type/ref}})" "(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}\\n   \:user/name {}\\n   \:decision/id {\:db/unique \:db.unique/identity}\\n   \:decision/user/id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/name {} \\n   \:item/decision/id {\:db/valueType \:db.type/ref}\\n   \:item/name {}\\n   \:item/wieght {}\\n   \:category/decision/id {\:db/valueType \:db.type/ref}\\n   \:category/name {}\\n   \:category/wieght {}\\n   \:rule/decision/id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item/name/one {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item/name/two {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category/name {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item/name/result {\:db/valueType \:db.type/ref}})" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\n       [\:db/add 1 \:user/id 1 \:decision/name \\"Truck\\"]\\n       [\:db/add 2 \:user/id 1 \:decision/name \\"Car\\"]])))" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\n       [\:db/add 1 \:user/id 123]])))" "db" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\n       [\:db/add 1 \:user/id 123]\\n       [\:db/add \:decision/id 1]\\n       [\:db/add 1 \:decision/name \\"Car\\"]\\n       [\:db/add \:decision/user/id 123]])))" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\n       [\:db/add 1 \:user/id 123]\\n       [\:db/add 1 \:decision/id 1]\\n       [\:db/add 1 \:decision/name \\"Car\\"]\\n       [\:db/add 1 \:decision/user/id 123]])))" "(def db \\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\n       [\:db/add 1 \:user/id 123]\\n       [\:db/add 1 \:decision/id 1]\\n       [\:db/add 1 \:decision/name \\"Car\\"]\\n       [\:db/add 1 \:decision/user/id 13]])))" "{\:item/decision/id 4}" "(\:item/decision/id {\:item/decision/id 4})" "(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/name {} \\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/name {}\\r\\n   \:item/wieght {}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/name {}\\r\\n   \:category/wieght {}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.name.one {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.name.two {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.name {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.name.result {\:db/valueType \:db.type/ref}})\\r\\n\\r\\n; need to add data\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 1 \:decision/id 1]\\r\\n       [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 1 \:decision/user.id 123]])))" "(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/name {} \\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/name {}\\r\\n   \:item/wieght {}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/name {}\\r\\n   \:category/wieght {}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.name.one {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.name.two {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.name {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.name.result {\:db/valueType \:db.type/ref}})\\r\\n\\r\\n; need to add data\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\n       [\:db/add 3 \:item/decision.id 1]\\n       [\:db/add 3 \:item/user.id 123]\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\n       [\:db/add 3 \:item/wieght 1] \\n       [\:db/add 4 \:item/decision.id 2]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]])))" "(datascript/q '[\:find ?data \\n                \:where [?e \:item/user.id 123]] db)" "(datascript/q '[\:find ?e\\n                \:where [?e \:item/user.id 123]] db)" "(datascript/q '[\:find ?name\\n                \:where [?e \:item/user.id 123]\\n                        [?e \:item/name ?name]] db)" "(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/name {} \\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/name {}\\r\\n   \:item/wieght {}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/name {}\\r\\n   \:category/wieght {}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.name.one {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.name.two {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.name {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.name.result {\:db/valueType \:db.type/ref}})\\r\\n\\r\\n; need to add data\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\n       [\:db/add 3 \:item/decision.id 1]\\n       [\:db/add 3 \:item/user.id 123]\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\n       [\:db/add 3 \:item/wieght 1] \\n       [\:db/add 4 \:item/decision.id 2]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]])))" "(datascript/q '[\:find ?name\\n                \:where [?e \:item/user.id 123]\\n                        [?e \:item/name ?name]] db)" "; need to add data\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/wieght 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]\\n       [\:db/add 5 \:category/decision.id 1]\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\n       [\:db/add 5 \:category/weight 1]\\n       [\:db/add 6 \:rule/user.id 123]\\n       [\:db/add 6 \:rule/decision.id 1]\\n       [\:db/add 6 \:rule/item.one.id 1]\\n       [\:db/add 6 \:rule/item.two.id 2]\\n       [\:db/add 6 \:rule/category.id 1]\\n       [\:rule/item.result.id 1]])))" "; need to add data\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/wieght 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]\\n       [\:db/add 5 \:category/decision.id 1]\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\n       [\:db/add 5 \:category/weight 1]\\n       [\:db/add 6 \:rule/user.id 123]\\n       [\:db/add 6 \:rule/decision.id 1]\\n       [\:db/add 6 \:rule/item.one.id 1]\\n       [\:db/add 6 \:rule/item.two.id 2]\\n       [\:db/add 6 \:rule/category.id 1]\\n       [\:db/add 6 \:rule/item.result.id 1]])))" "(datascript/q '[\:find ?name\\n                \:where [?e \:item/user.id 123]\\n                        [?e \:item/name ?name]] db)" "(datascript/q '[\:find ?name\\n                \:where [?e \:rule/user.id 123]\\n                        [?e \:rule/itme.result.di ?name]] db)" "(datascript/q '[\:find ?name\\n                \:where [?e \:rule/user.id 123]\\n                        [?e \:rule/itme.result.id ?name]] db)" "(datascript/q '[\:find ?name\\n                \:where [?e \:rule/user.id 123]\\n                        [?e \:rule/item.result.id ?name]] db)" "(def schema\\r\\n  {\:decision/id   {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {}\\r\\n   \:decision/item-list   {}\\r\\n   \:decision/category-list {}\\r\\n   \:decision/decision-result-list {}})\\r\\n\\r\\n(def db-norm\\r\\n  (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1  \:item/id 1]\\r\\n                               [\:db/add 1  \:item/name \\"Sentra\\"]\\r\\n                               [\:db/add 1  \:item/sequence 1 ]])))\\r\\n\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with [[\:db/add 1 \:decision/id 1]\\r\\n                               [\:db/add 1 \:decision/name \\"Car\\"]\\r\\n                               [\:db/add 1 \:decision/item-list  \\r\\n                          [(t/item. \\"Sentra\\" 0) \\r\\n                                 (t/item. \\"Civic\\" 1)\\r\\n                                 (t/item. \\"Soal\\" 2) \\r\\n                                 (t/item. \\"Jetta\\" 3)\\r\\n                                 (t/item. \\"A4\\" 4)]]\\r\\n                               [\:db/add 1 \:decision/category-list  \\r\\n                          [(t/category. \\"MPG\\" 0 nil)\\r\\n                                 (t/category. \\"Acceleration\\" 1 nil)\\r\\n                                 (t/category. \\"Comfort\\" 2 nil)\\r\\n                                 (t/category. \\"Style\\" 3 nil)]]\\r\\n                               [\:db/add 1 \:decision/decision-result-list  \\r\\n                          [(t/decision-result. 1 2 1 1)]]])\\r\\n         \\r\\n    (datascript/db-with [[\:db/add 2 \:decision/id 2]\\r\\n                               [\:db/add 2 \:decision/name \\"Truck\\"]\\r\\n                               [\:db/add 2 \:decision/item-list  \\r\\n                                [(t/item. \\"F150\\" 0) \\r\\n                                 (t/item. \\"Ram\\" 1)\\r\\n                                 (t/item. \\"Tahoe\\" 2)]]\\r\\n                               [\:db/add 2 \:decision/category-list  \\r\\n                                [(t/category. \\"MPG\\" 0 nil)\\r\\n                                 (t/category. \\"Acceleration\\" 1 nil)\\r\\n                                 (t/category. \\"Comfort\\" 2 nil)\\r\\n                                 (t/category. \\"Style\\" 3 nil)]]\\r\\n                               [\:db/add 2 \:decision/decision-result-list  \\r\\n                                [(t/decision-result. 1 2 1 1)]]])))\\r\\n\\r\\n(defn get-local-dec-list []\\r\\n  (map \#(t/summary-decision. (first %) (second %) 80)\\r\\n       (datascript/q '[\:find ?value ?id\\r\\n                       \:where [?e \:decision/name ?value]\\r\\n                       [?e \:decision/id ?id]] db)))\\r\\n\\r\\n(defn get-item-list [dec-key]\\r\\n  \\"get all information for a decision\\" \\r\\n  (first \\r\\n    (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                    \:in $ ?key\\r\\n                    \:where [?e \:decision/id ?key]\\r\\n                    [?e \:decision/item-list ?item-list]])))\\r\\n\\r\\n(defn get-category-list [dec-key]\\r\\n  \\"get all information for a decision\\" \\r\\n  (first \\r\\n    (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                    \:in $ ?key\\r\\n                    \:where [?e \:decision/id ?key]\\r\\n                    [?e \:decision/category-list ?category-list]])))\\r\\n\\r\\n(defn get-decide-results-list [dec-key]\\r\\n  \\"get all information for a decision\\" \\r\\n  (first \\r\\n    (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                    \:in $ ?key\\r\\n                    \:where [?e \:decision/id ?key]\\r\\n                    [?e \:decision/decision-result-list ?decision-result-list]])))\\r\\n\\r\\n\\r\\n(defn get-local-decision [dec-key]\\r\\n  \\"get all information for a decision\\" \\r\\n  (let [val (first \\r\\n              (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                              \:in $ ?key\\r\\n                              \:where [?e \:decision/id ?key]\\r\\n                              [?e \:decision/name ?name] \\r\\n                              [?e \:decision/item-list ?item-list]\\r\\n                              [?e \:decision/category-list ?category-list]\\r\\n                              [?e \:decision/decision-result-list ?decision-result-list]] db dec-key))]\\r\\n    (t/decision-data. (nth val 0) (nth val 1) (nth val 2) (nth val 3) (nth val 4))))" "(defn get-local-decision [dec-key]\\r\\n  \\"get all information for a decision\\" \\r\\n  (let [val (first \\r\\n              (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                              \:in $ ?key\\r\\n                              \:where [?e \:decision/id ?key]\\r\\n                              [?e \:decision/name ?name] \\r\\n                              [?e \:decision/item-list ?item-list]\\r\\n                              [?e \:decision/category-list ?category-list]\\r\\n                              [?e \:decision/decision-result-list ?decision-result-list]] db dec-key))]\\r\\n    (t/decision-data. (nth val 0) (nth val 1) (nth val 2) (nth val 3) (nth val 4))))" "defrecord summary-decision [name\\r\\n                             name-id\\r\\n                             perc-comp])\\r\\n\\r\\n(defrecord category [name \\r\\n                     seq\\r\\n                     weight])\\r\\n\\r\\n(defrecord item [name seq])\\r\\n\\r\\n(defrecord decision-result [item-one \\r\\n                            item-two \\r\\n                            category \\r\\n                            result])\\r\\n\\r\\n(defrecord decision-data [name\\r\\n                          key\\r\\n                        ;  perc-comp\\r\\n                          item-list\\r\\n                          category-list\\r\\n                          decision-result-list])\\r\\n\\r\\n(defn progress-format [comp-perc]\\r\\n  (cond\\r\\n    (\= 0 comp-perc)\\r\\n    \\"Not Started\\"\\r\\n    (\= 100 comp-perc)\\r\\n    \\"Completed\\"\\r\\n    \:default\\r\\n    (str comp-perc \\" Completed\\")))\\r\\n    \\r\\n(defn stand-name [nav-key type-key]\\r\\n  \\"Standardized names based on nav type\\"\\r\\n  (cond \\r\\n    (\= type-key \:list)\\r\\n    (keyword (str (name nav-key) \\"-list\\"))\\r\\n    (\= type-key \:edit) \\r\\n    (str (name nav-key) \\"-edit\\")\\r\\n    (\= type-key \:edit-nav)\\r\\n    (keyword (str (name nav-key) \\"-edit\\"))\\r\\n    (\= type-key \:save-nav) \\r\\n    (keyword (str (name nav-key) \\"-save\\"))))" "(defn get-local-decision [dec-key]\\r\\n  \\"get all information for a decision\\" \\r\\n  (let [val (first \\r\\n              (datascript/q '[\:find ?name ?key ?item-list ?category-list ?decision-result-list\\r\\n                              \:in $ ?key\\r\\n                              \:where [?e \:decision/id ?key]\\r\\n                              [?e \:decision/name ?name] \\r\\n                              [?e \:decision/item-list ?item-list]\\r\\n                              [?e \:decision/category-list ?category-list]\\r\\n                              [?e \:decision/decision-result-list ?decision-result-list]] db dec-key))]\\r\\n    (decision-data. (nth val 0) (nth val 1) (nth val 2) (nth val 3) (nth val 4))))" "(get-local-dec-list 1)" "(datascript/q '[\:find ?value ?id\\r\\n                       \:where [?e \:decision/name ?value]\\r\\n                       [?e \:decision/id ?id]] db)" "(defrecord summary-decision [name\\r\\n                             name-id\\r\\n                             perc-comp]" "(defrecord summary-decision [name\\r\\n                             name-id\\r\\n                             perc-comp])" "(defn get-local-dec-list []\\r\\n  (map \#(t/summary-decision. (first %) (second %) 80)\\r\\n       (datascript/q '[\:find ?value ?id\\r\\n                       \:where [?e \:decision/name ?value]\\r\\n                       [?e \:decision/id ?id]] db)))" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) 80)\\r\\n       (datascript/q '[\:find ?value ?id\\r\\n                       \:where [?e \:decision/name ?value]\\r\\n                       [?e \:decision/id ?id]] db)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth 2 %))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                               [?e \:decision/id ?id]\\r\\n                               [?e \:decision/name ?name]\\r\\n                               [?e \:decision/complete-perc ?complete-perc]] db user-id)))" "(def user-id 123)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth 2 %))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                               [?e \:decision/id ?id]\\r\\n                               [?e \:decision/name ?name]\\r\\n                               [?e \:decision/complete-perc ?complete-perc]] db user-id)))" "\\r\\n(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/name {}\\r\\n   \:item/wieght {}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/name {}\\r\\n   \:category/wieght {}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}})\\r\\n\\r\\n(def user-id 123)\\r\\n\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/wieght 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]])))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth 2 %))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth 2 %))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth 2 %))\\r\\n       (datascript/q '[\:find ?name ?id \\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth 2 %))\\r\\n       (datascript/q '[\:find ?e\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth 2 %))\\r\\n       (datascript/q '[\:find ?e\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]] db \\"123\\")))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. 1 2 3)\\r\\n       (datascript/q '[\:find ?e\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n       (datascript/q '[\:find ?e\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]] db 123))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth 2 %))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(get-local-dec-list)" "\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/wieght 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\n       [\:db/add 52 \:decision/id 1]\\r\\n       [\:db/add 52 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n])))" "\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/wieght 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\n       [\:db/add 52 \:decision/id 2]\\r\\n       [\:db/add 52 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n])))" "(get-local-dec-list)" "\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/wieght 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\n       [\:db/add 52 \:decision/id 2]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n])))" "(get-local-dec-list)" "(defn get-items [dec-key]\\n  (datascript/q '[find ?id ?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id id]\\n                  [?e \:item/name ?name]\\n                  [?e \:item/wieght ?weight]] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?id ?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id id]\\n                  [?e \:item/name ?name]\\n                  [?e \:item/wieght ?weight]] db user-id dec-key))" "(get-items 1)" "(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/wieght 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 2]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]])))" "(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:item/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/id {\:db/unique \:db.unique/identity}\\r\\n   \:item/name {}\\r\\n   \:item/wieght {}\\r\\n   \:category/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/id  {\:db/unique \:db.unique/identity}\\r\\n   \:category/name {}\\r\\n   \:category/wieght {}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/id {\:db/unique \:db.unique/identity}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}})" "(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/wieght 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]\\n       [\:db/add 5 \:item/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\n       [\:db/add 6 \:rule/id 6]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 2]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]])))" "(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:item/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/id {\:db/unique \:db.unique/identity}\\r\\n   \:item/name {}\\r\\n   \:item/wieght {}\\r\\n   \:category/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/id  {\:db/unique \:db.unique/identity}\\r\\n   \:category/name {}\\r\\n   \:category/wieght {}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/id {\:db/unique \:db.unique/identity}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}})" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?id ?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id id]\\n                  [?e \:item/name ?name]\\n                  [?e \:item/wieght ?weight]] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?id ?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?id]\\n                  [?e \:item/name ?name]\\n                  [?e \:item/wieght ?weight]] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?id ?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?id]\\n                  [?e \:item/name ?name]\\n                  [?e \:item/weight ?weight]] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?id ;?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?id ;?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?user-id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?id ;?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?e ;?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?e ;?name ?weight\\n                  \:in $ ?user-id ?dec-key\\n                  \:from [?e \:item/user.id ?user-id]\\n                  ;[?e \:item/decision.id ?dec-key]\\n                  ;[?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?e ;?name ?weight\\n                  \:in $ [?user-id ?dec-key]\\n                  \:from [?e \:item/user.id ?user-id]\\n                  ;[?e \:item/decision.id ?dec-key]\\n                  ;[?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db user-id dec-key))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?e ;?name ?weight\\n                  \:in $ ?user-id\\n                  \:from [?e \:item/user.id ?user-id]\\n                  ;[?e \:item/decision.id ?dec-key]\\n                  ;[?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?user-id\\n                  \:in $ ?user-id\\n                  \:from [?e \:item/user.id ?user-id]\\n                  ;[?e \:item/decision.id ?dec-key]\\n                  ;[?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?user-id\\n                  \:in $ ?user-id\\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  ;[?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db user-id))" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?user-id\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  ;[?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(get-items 0)" "(get-items -1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?e\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  ;[?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items -1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?e\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  ;[?e \:item/decision.id ?dec-key]\\n                  ;[?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?id\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  ;[?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?id\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  ;[?e \:item/decision.id ?dec-key]\\n                  [?d \:item/id ?e]\\n                  [?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?d\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  ;[?e \:item/decision.id ?dec-key]\\n                  [?d \:item/id ?e]\\n                  ;[?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?user-id\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  ;[?e \:item/decision.id ?dec-key]\\n                  ;[?d \:item/id ?e]\\n                  ;[?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?dec-key\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  ;[?d \:item/id ?e]\\n                  ;[?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?dec-key\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?id]\\n                  ;[?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?dec-key ?id\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?id]\\n                  ;[?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(def user-id 123)\\r\\n\\r\\n(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:item/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/id {\:db/unique \:db.unique/identity}\\r\\n   \:item/name {}\\r\\n   \:item/wieght {}\\r\\n   \:category/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/id  {\:db/unique \:db.unique/identity}\\r\\n   \:category/name {}\\r\\n   \:category/wieght {}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/id {\:db/unique \:db.unique/identity}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}})\\r\\n\\r\\n\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/wieght 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/wieght 1]\\r\\n       [\:db/add 5 \:item/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/id 6]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 2]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]])))" "(get-items 1)" "(def user-id 123)\\r\\n\\r\\n(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:item/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/id {\:db/unique \:db.unique/identity}\\r\\n   \:item/name {}\\r\\n   \:item/weight {}\\r\\n   \:category/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/id  {\:db/unique \:db.unique/identity}\\r\\n   \:category/name {}\\r\\n   \:category/weight {}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/id {\:db/unique \:db.unique/identity}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}})\\r\\n\\r\\n\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 5 \:item/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/id 6]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 2]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]])))" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?dec-key ?id\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?e \:item/id ?id]\\n                  ;[?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?dec-key ?id\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [?id \:item/id]\\n                  ;[?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?dec-key ?id\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/decision.id ?dec-key]\\n                  [\:item/id ?id]\\n                  ;[?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-items [dec-key]\\n  (datascript/q '[\:find ?name\\n                  \:in $ ?dec-key ?user-id \\n                  \:from [?e \:item/user.id ?user-id]\\n                  [?e \:item/name ?name]\\n                 ; [?e \:item/decision.id ?dec-key]\\n                  ;[?e \:item/id ?id]\\n                  ;[?d \:item/id ?id]\\n                  ;[?e \:item/name ?name]\\n                  ;[?e \:item/weight ?weight]\\n                  ] db dec-key user-id))" "(get-items 1)" "(defn get-local-dec-list []\\r\\n  (map \#(t/summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id \\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]] db 123)))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n       (datascript/q '[\:find ?name ?id \\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]] db 123))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n       (datascript/q '[\:find ?name ?id \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]] db 1 123))" "(get-local-dec-list)" "(defn get-local-dec-list []\\r\\n       (datascript/q '[\:find ?name ?id \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]] db 2 123))" "(get-local-dec-list)" "(defn get-local-dec-list [dec-id]\\r\\n       (datascript/q '[\:find ?name ?id \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]] db dec-id 123))" "(get-local-dec-list)" "(get-local-dec-list 1)" "(get-local-dec-list 3)" "(defn get-item-list [dec-id]\\r\\n       (datascript/q '[\:find ?name ?id \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]] db dec-id 123))" "(get-local-dec-list 3)" "(get-local-dec-list 1)" "(defn get-item-list [dec-id]\\r\\n       (datascript/q '[\:find ?name ?id ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\n                       [?e \:item/weight ?weight]] db dec-id 123))" "(get-local-dec-list 1)" "(defn get-item-list [dec-id]\\r\\n       (datascript/q '[\:find ?name ?id ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\n                       [?e \:item/weight ?weight]] db dec-id 123))" "(get-item-list 1)" "(defn get-item-list [dec-id]\\r\\n       (datascript/q '[\:find ?name ?id ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\n                       [?e \:item/weight ?weight]] db dec-id user-id))" "(get-item-list 1)" "(defrecord item [id\\r\\n                 name \\r\\n                 seq\\r\\n                 weight])\\r\\n\\r\\n(defrecord category [id\\r\\n                     name \\r\\n                     seq\\r\\n                     weight])" "(defn get-item-list [dec-id]\\n  (map \#(t/item. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\n                       [?e \:item/weight ?weight]\\n                       [?e \:item/seq ?seq]] db dec-id user-id))" "(defn get-item-list [dec-id]\\n  (map \#(t/item. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\n                       [?e \:item/weight ?weight]\\n                       [?e \:item/seq ?seq]] db dec-id user-id)))" "(defn get-item-list [dec-id]\\n  (map \#(item. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\n                       [?e \:item/weight ?weight]\\n                       [?e \:item/seq ?seq]] db dec-id user-id)))" "\\r\\n(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:item/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/id {\:db/unique \:db.unique/identity}\\r\\n   \:item/name {}\\r\\n   \:item/weight {}\\r\\n   \:item/seq {}\\r\\n   \:category/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/id  {\:db/unique \:db.unique/identity}\\r\\n   \:category/name {}\\r\\n   \:category/weight {}\\r\\n   \:category/seq {}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/id {\:db/unique \:db.unique/identity}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}})\\r\\n\\r\\n\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMS\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 5 \:item/seq 2]\\r\\n       [\:db/add 5 \:item/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/id 6]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 2]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]])))" "(get-item-list 1)" "\\r\\n(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:item/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/id {\:db/unique \:db.unique/identity}\\r\\n   \:item/name {}\\r\\n   \:item/weight {}\\r\\n   \:item/seq {}\\r\\n   \:category/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/id  {\:db/unique \:db.unique/identity}\\r\\n   \:category/name {}\\r\\n   \:category/weight {}\\r\\n   \:category/seq {}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/id {\:db/unique \:db.unique/identity}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}})\\r\\n\\r\\n\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:item/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/id 6]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 2]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]])))" "(get-item-list 1)" "\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:item/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/id 6]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 2]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 2]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 3]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 2]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 4]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:item/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 2]\\r\\n       [\:db/add 55 \:category/id 5]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 2]\\r\\n       [\:db/add 56 \:rule/id 6]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]])))" "(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:item/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:rule/user.id 123]\\r\\n       [\:db/add 6 \:rule/decision.id 1]\\r\\n       [\:db/add 6 \:rule/id 6]\\r\\n       [\:db/add 6 \:rule/item.one.id 1]\\r\\n       [\:db/add 6 \:rule/item.two.id 2]\\r\\n       [\:db/add 6 \:rule/category.id 1]\\r\\n       [\:db/add 6 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 52]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 52]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 53]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 52]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 54]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:item/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 52]\\r\\n       [\:db/add 55 \:category/id 55]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 52]\\r\\n       [\:db/add 56 \:rule/id 56]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]])))" "(get-item-list 1)" "(get-item-list 2)" "(get-item-list 52)" "(defn get-item-list [dec-id]\\n  (map \#(item. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\n                       [?e \:category/weight ?weight]\\n                       [?e \:category/seq ?seq]] db dec-id user-id)))" "(get-item-list 52)" "(get-item-list 1)" "(defn get-category-list-list [dec-id]\\n  (map \#(item. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?id ?one ?two ?cat ?res \\r\\n                       \:where [?e \:rule/user.id ?user-id]\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\n                       [?e \:rule/item.two.id ?two]\\n                       [?e \:rule/category.id ?cat]\\n                       [?e \:rule/item.result.id ?res]] db dec-id user-id)))" "(defrecord decision-result [item-one \\r\\n                            item-two \\r\\n                            category \\r\\n                            result])" "(defn get-category-list-list [dec-id]\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?id ?one ?two ?cat ?res \\r\\n                       \:where [?e \:rule/user.id ?user-id]\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\n                       [?e \:rule/item.two.id ?two]\\n                       [?e \:rule/category.id ?cat]\\n                       [?e \:rule/item.result.id ?res]] db dec-id user-id)))" "(defn get-decide-list [dec-id]\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?id ?one ?two ?cat ?res \\r\\n                       \:where [?e \:rule/user.id ?user-id]\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\n                       [?e \:rule/item.two.id ?two]\\n                       [?e \:rule/category.id ?cat]\\n                       [?e \:rule/item.result.id ?res]] db dec-id user-id)))" "(get-decide-list 1)" "(defn get-decide-list [dec-id]\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id user-id\\r\\n                       \:where [?e \:rule/user.id ?user-id]\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\n                       [?e \:rule/item.two.id ?two]\\n                       [?e \:rule/category.id ?cat]\\n                       [?e \:rule/item.result.id ?res]] db dec-id user-id)))" "(get-decide-list 1)" "(defn get-decide-list [dec-id]\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?user-id]\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\n                       [?e \:rule/item.two.id ?two]\\n                       [?e \:rule/category.id ?cat]\\n                       [?e \:rule/item.result.id ?res]] db dec-id user-id)))" "(get-decide-list 1)" "(get-decide-list 2)" "(get-decide-list 52)" "(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:category/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:category/user.id 123]\\r\\n       [\:db/add 6 \:category/decision.id 1]\\r\\n       [\:db/add 6 \:category/id 6]\\r\\n       [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n       [\:db/add 6 \:category/weight 1]\\r\\n       [\:db/add 6 \:category/seq 2]\\r\\n       [\:db/add 7 \:rule/user.id 123]\\r\\n       [\:db/add 7 \:rule/decision.id 1]\\r\\n       [\:db/add 7 \:rule/id 7]\\r\\n       [\:db/add 7 \:rule/item.one.id 1]\\r\\n       [\:db/add 7 \:rule/item.two.id 2]\\r\\n       [\:db/add 7 \:rule/category.id 1]\\r\\n       [\:db/add 7 \:rule/item.result.id 1]\\r\\n       [\:db/add 8 \:rule/user.id 123]\\r\\n       [\:db/add 8 \:rule/decision.id 1]\\r\\n       [\:db/add 8 \:rule/id 8]\\r\\n       [\:db/add 8 \:rule/item.one.id 1]\\r\\n       [\:db/add 8 \:rule/item.two.id 2]\\r\\n       [\:db/add 8 \:rule/category.id 1]\\r\\n       [\:db/add 8 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 52]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 52]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 53]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 52]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 54]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:item/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 52]\\r\\n       [\:db/add 55 \:category/id 55]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 52]\\r\\n       [\:db/add 56 \:rule/id 56]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]])))" "(get-category-list 1)" "(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] db dec-id user-id)))" "(get-category-list 1)" "(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] db dec-id user-id)))" "(get-category-list 1)" "(get-category-list 52)" "(get-category-list 1)" "(defn get-category-list [dec-id]\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] db dec-id user-id))" "(get-category-list 1)" "(get-category-list 52)" "\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] db 1 user-id)" "\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                      ; [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] db 1 user-id)" "(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:category/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:category/user.id 123]\\r\\n       [\:db/add 6 \:category/decision.id 1]\\r\\n       [\:db/add 6 \:category/id 6]\\r\\n       [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n       [\:db/add 6 \:category/weight 1]\\r\\n       [\:db/add 6 \:category/seq 2]\\r\\n       [\:db/add 7 \:rule/user.id 123]\\r\\n       [\:db/add 7 \:rule/decision.id 1]\\r\\n       [\:db/add 7 \:rule/id 7]\\r\\n       [\:db/add 7 \:rule/item.one.id 1]\\r\\n       [\:db/add 7 \:rule/item.two.id 2]\\r\\n       [\:db/add 7 \:rule/category.id 1]\\r\\n       [\:db/add 7 \:rule/item.result.id 1]\\r\\n       [\:db/add 8 \:rule/user.id 123]\\r\\n       [\:db/add 8 \:rule/decision.id 1]\\r\\n       [\:db/add 8 \:rule/id 8]\\r\\n       [\:db/add 8 \:rule/item.one.id 1]\\r\\n       [\:db/add 8 \:rule/item.two.id 2]\\r\\n       [\:db/add 8 \:rule/category.id 1]\\r\\n       [\:db/add 8 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 52]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 52]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 53]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 52]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 54]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:item/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 52]\\r\\n       [\:db/add 55 \:category/id 55]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 52]\\r\\n       [\:db/add 56 \:rule/id 56]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]])))" "\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                      ; [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] db 1 user-id)" "\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                      ; [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 1 user-id)" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                      ; [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 1 user-id)" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where; [?e \:item/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 1 user-id)" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where; [?e \:item/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 52 user-id)" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where; [?e \:item/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 1 user-id)" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where\\n                       [?e \:item/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 1 user-id)" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where\\n                       [?e \:catagory/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 1 user-id)" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where\\n                       [?e \:category/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 1 user-id)" "(defn get-decide-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?user-id]\\r\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.res\\n                        ult.id ?res]] db dec-id user-id)))" "(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:category/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] db dec-id user-id)))" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where\\n                       [?e \:category/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 1 user-id)" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where\\n                       [?e \:category/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 52 user-id)" "\\r\\n(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:category/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:category/user.id 123]\\r\\n       [\:db/add 6 \:category/decision.id 1]\\r\\n       [\:db/add 6 \:category/id 6]\\r\\n       [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n       [\:db/add 6 \:category/weight 1]\\r\\n       [\:db/add 6 \:category/seq 2]\\r\\n       [\:db/add 7 \:rule/user.id 123]\\r\\n       [\:db/add 7 \:rule/decision.id 1]\\r\\n       [\:db/add 7 \:rule/id 7]\\r\\n       [\:db/add 7 \:rule/item.one.id 1]\\r\\n       [\:db/add 7 \:rule/item.two.id 2]\\r\\n       [\:db/add 7 \:rule/category.id 1]\\r\\n       [\:db/add 7 \:rule/item.result.id 1]\\r\\n       [\:db/add 8 \:rule/user.id 123]\\r\\n       [\:db/add 8 \:rule/decision.id 1]\\r\\n       [\:db/add 8 \:rule/id 8]\\r\\n       [\:db/add 8 \:rule/item.one.id 1]\\r\\n       [\:db/add 8 \:rule/item.two.id 2]\\r\\n       [\:db/add 8 \:rule/category.id 1]\\r\\n       [\:db/add 8 \:rule/item.result.id 1]\\r\\n       [\:db/add 52 \:decision/id 52]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 52]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 53]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 52]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 54]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:category/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 52]\\r\\n       [\:db/add 55 \:category/id 55]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 52]\\r\\n       [\:db/add 56 \:rule/id 56]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]])))" "\\r\\n       (datascript/q '[\:find ?name\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where\\n                       [?e \:category/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                      ; [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       ;[?e \:category/weight ?weight]\\r\\n                       ;[?e \:category/seq ?seq]\\n                       ] db 52 user-id)" "(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] db dec-id user-id)))" "(get-category-list 52)" "(get-category-list 1)" "(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:category/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] db dec-id user-id)))" "(get-category-list 1)" "(get-category-list 52)" "(def db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:category/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:category/user.id 123]\\r\\n       [\:db/add 6 \:category/decision.id 1]\\r\\n       [\:db/add 6 \:category/id 6]\\r\\n       [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n       [\:db/add 6 \:category/weight 1]\\r\\n       [\:db/add 6 \:category/seq 2]\\r\\n       [\:db/add 7 \:rule/user.id 123]\\r\\n       [\:db/add 7 \:rule/decision.id 1]\\r\\n       [\:db/add 7 \:rule/id 7]\\r\\n       [\:db/add 7 \:rule/item.one.id 1]\\r\\n       [\:db/add 7 \:rule/item.two.id 2]\\r\\n       [\:db/add 7 \:rule/category.id 1]\\r\\n       [\:db/add 7 \:rule/item.result.id 1]\\r\\n       [\:db/add 8 \:rule/user.id 123]\\r\\n       [\:db/add 8 \:rule/decision.id 1]\\r\\n       [\:db/add 8 \:rule/id 8]\\r\\n       [\:db/add 8 \:rule/item.one.id 1]\\r\\n       [\:db/add 8 \:rule/item.two.id 2]\\r\\n       [\:db/add 8 \:rule/category.id 2]\\r\\n       [\:db/add 8 \:rule/item.result.id 2]\\r\\n       [\:db/add 52 \:decision/id 52]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 52]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 53]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 52]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 54]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:category/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 52]\\r\\n       [\:db/add 55 \:category/id 55]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 52]\\r\\n       [\:db/add 56 \:rule/id 56]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]])))" "(defn get-decide-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?user-id]\\r\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] db dec-id user-id)))" "(get-decide-list 1)" "(get-decide-list 52\\n                 )" "(defrecord decision-result [id \\r\\n                            item-one \\r\\n                            item-two \\r\\n                            category \\r\\n                            result])" "(get-decide-list 52\\n                 )" "(defn get-decide-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3) (nth % 4))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?user-id]\\r\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] db dec-id user-id)))" "(get-decide-list 52\\n                 )" "(get-decide-list 1\\n                 )" "(datascript/transact\! db {\:db/id -1 \:decision/id {\:db/id -1} \:decision/name \\"test\\"})" "(datascript/transact\! (datascript/create-conn db) {\:db/id -1 \:decision/id {\:db/id -1} \:decision/name \\"test\\"})" "(datascript/transact\! (datascript/create-conn db) {\:decision/id {\:db/id -1} \:decision/name \\"test\\"})" "(datascript/transact\! (datascript/create-conn db) {\:decision/user.id 123 \:decision/id {\:db/id -1} \:decision/name \\"test\\" \:decision/complete.perc 0.4})" "(datascript/transact\! (datascript/create-conn db) {\:decision/user.id 123 \:decision/id -1 \:decision/name \\"test\\" \:decision/complete.perc 0.4})" "(datascript/transact\! (datascript/create-conn db) \\n                      [{\:decision/user.id 123 \:decision/id {\:db/id -1} \:decision/name \\"test\\" \:decision/complete.perc 0.4}])" "(datascript/transact\! (datascript/create-conn db) \\n                      [{ \:db/id -1 \:decision/user.id 123 \:decision/id {\:db/id -1} \:decision/name \\"test\\" \:decision/complete.perc 0.4}])" "(datascript/transact\! (datascript/create-conn db) \\n                      [{ \:db/id -1 \:decision/user.id 123 \:decision/id -1 \:decision/name \\"test\\" \:decision/complete.perc 0.4}])" "(datascript/transact\! (datascript/create-conn db) \\n                      [{ \:db/id -1 \:decision/user.id 123 \:decision/id 3 \:decision/name \\"test\\" \:decision/complete.perc 0.4}])" "(let [schema {\:aka {\:db/cardinality \:db.cardinality/many}}\\r\\n      conn   (d/create-conn schema)]\\r\\n  (d/transact\! conn [ { \:db/id -1\\r\\n                        \:name  \\"Maksim\\"\\r\\n                        \:age   45\\r\\n                        \:aka   [\\"Maks Otto von Stirlitz\\", \\"Jack Ryan\\"] } ])\\r\\n  (d/q '[ \:find  ?n ?a\\r\\n          \:where [?e \:aka \\"Maks Otto von Stirlitz\\"]\\r\\n                 [?e \:name ?n]\\r\\n                 [?e \:age  ?a] ]\\r\\n       @conn))" "(datascript/transact\! (datascript/create-conn db) \\n                      [{ \:db/id -1 \:decision/user.id 123 \:decision/id 3 \:decision/name \\"test\\" \:decision/complete.perc 0.4}])" " (datascript/create-conn db)" "(datascript/transact\! @db \\n                      [{ \:db/id -1 \:decision/user.id 123 \:decision/id 3 \:decision/name \\"test\\" \:decision/complete.perc 0.4}])" "(datascript/empty-db schema)" "(class? (datascript/empty-db schema))" "(datascript/db-with db {\:decision/id 53\\r\\n                        \:decision/name \\"Pet\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9})" "(datascript/db-with db [{\:decision/id 53\\r\\n                        \:decision/name \\"Pet\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}])" "(def new-db (datascript/db-with db [{\:decision/id 53\\r\\n                        \:decision/name \\"Pet\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}]))" "(get-decide-list)" "(get-local-dec-list)" "\\r\\n(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db 123)))" "(get-local-dec-list)" "\\r\\n(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] db-new 123)))" "(def new-db (datascript/db-with db [{\:decision/id 53\\r\\n                        \:decision/name \\"Pet\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}]))" "\\r\\n(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] new-db 123)))" "(get-local-dec-list)" "(def new-db (datascript/db-with db [{\:decision/id 53\\r\\n                        \:decision/name \\"booty\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}]))" "(def new-db (datascript/transact\! db [{\:decision/id 53\\r\\n                        \:decision/name \\"booty\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}]))" "(def new-db (datascript/transact\! @db [{\:decision/id 53\\r\\n                        \:decision/name \\"booty\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}]))" "(def atom db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:category/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:category/user.id 123]\\r\\n       [\:db/add 6 \:category/decision.id 1]\\r\\n       [\:db/add 6 \:category/id 6]\\r\\n       [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n       [\:db/add 6 \:category/weight 1]\\r\\n       [\:db/add 6 \:category/seq 2]\\r\\n       [\:db/add 7 \:rule/user.id 123]\\r\\n       [\:db/add 7 \:rule/decision.id 1]\\r\\n       [\:db/add 7 \:rule/id 7]\\r\\n       [\:db/add 7 \:rule/item.one.id 1]\\r\\n       [\:db/add 7 \:rule/item.two.id 2]\\r\\n       [\:db/add 7 \:rule/category.id 1]\\r\\n       [\:db/add 7 \:rule/item.result.id 1]\\r\\n       [\:db/add 8 \:rule/user.id 123]\\r\\n       [\:db/add 8 \:rule/decision.id 1]\\r\\n       [\:db/add 8 \:rule/id 8]\\r\\n       [\:db/add 8 \:rule/item.one.id 1]\\r\\n       [\:db/add 8 \:rule/item.two.id 2]\\r\\n       [\:db/add 8 \:rule/category.id 2]\\r\\n       [\:db/add 8 \:rule/item.result.id 2]\\r\\n       [\:db/add 52 \:decision/id 52]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 52]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 53]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 52]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 54]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:category/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 52]\\r\\n       [\:db/add 55 \:category/id 55]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 52]\\r\\n       [\:db/add 56 \:rule/id 56]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]])))" "(def (atom db \\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:category/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:category/user.id 123]\\r\\n       [\:db/add 6 \:category/decision.id 1]\\r\\n       [\:db/add 6 \:category/id 6]\\r\\n       [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n       [\:db/add 6 \:category/weight 1]\\r\\n       [\:db/add 6 \:category/seq 2]\\r\\n       [\:db/add 7 \:rule/user.id 123]\\r\\n       [\:db/add 7 \:rule/decision.id 1]\\r\\n       [\:db/add 7 \:rule/id 7]\\r\\n       [\:db/add 7 \:rule/item.one.id 1]\\r\\n       [\:db/add 7 \:rule/item.two.id 2]\\r\\n       [\:db/add 7 \:rule/category.id 1]\\r\\n       [\:db/add 7 \:rule/item.result.id 1]\\r\\n       [\:db/add 8 \:rule/user.id 123]\\r\\n       [\:db/add 8 \:rule/decision.id 1]\\r\\n       [\:db/add 8 \:rule/id 8]\\r\\n       [\:db/add 8 \:rule/item.one.id 1]\\r\\n       [\:db/add 8 \:rule/item.two.id 2]\\r\\n       [\:db/add 8 \:rule/category.id 2]\\r\\n       [\:db/add 8 \:rule/item.result.id 2]\\r\\n       [\:db/add 52 \:decision/id 52]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 52]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 53]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 52]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 54]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:category/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 52]\\r\\n       [\:db/add 55 \:category/id 55]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 52]\\r\\n       [\:db/add 56 \:rule/id 56]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]]))))" "(def db-a (atom\\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:category/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:category/user.id 123]\\r\\n       [\:db/add 6 \:category/decision.id 1]\\r\\n       [\:db/add 6 \:category/id 6]\\r\\n       [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n       [\:db/add 6 \:category/weight 1]\\r\\n       [\:db/add 6 \:category/seq 2]\\r\\n       [\:db/add 7 \:rule/user.id 123]\\r\\n       [\:db/add 7 \:rule/decision.id 1]\\r\\n       [\:db/add 7 \:rule/id 7]\\r\\n       [\:db/add 7 \:rule/item.one.id 1]\\r\\n       [\:db/add 7 \:rule/item.two.id 2]\\r\\n       [\:db/add 7 \:rule/category.id 1]\\r\\n       [\:db/add 7 \:rule/item.result.id 1]\\r\\n       [\:db/add 8 \:rule/user.id 123]\\r\\n       [\:db/add 8 \:rule/decision.id 1]\\r\\n       [\:db/add 8 \:rule/id 8]\\r\\n       [\:db/add 8 \:rule/item.one.id 1]\\r\\n       [\:db/add 8 \:rule/item.two.id 2]\\r\\n       [\:db/add 8 \:rule/category.id 2]\\r\\n       [\:db/add 8 \:rule/item.result.id 2]\\r\\n       [\:db/add 52 \:decision/id 52]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 52]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 53]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 52]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 54]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:category/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 52]\\r\\n       [\:db/add 55 \:category/id 55]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 52]\\r\\n       [\:db/add 56 \:rule/id 56]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]]))))" "(def new-db (datascript/transact\! db-a [{\:decision/id 53\\r\\n                        \:decision/name \\"booty\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}]))" "(datascript/transact\! db-a [{\:decision/id 53\\r\\n                        \:decision/name \\"booty\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}])" "(datascript/create-conn db)" "(datascript/create-conn schema)" "(def schema-conn (datascript/create-conn schema))" "(class? schema-conn)" "(def db \\n  (atom\\r\\n  (-> (datascript/empty-db schema)\\r\\n    (datascript/db-with\\r\\n      [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n       [\:db/add 1 \:user/id 123]\\r\\n       [\:db/add 2 \:decision/id 1]\\r\\n       [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n       [\:db/add 2 \:decision/user.id 123]\\r\\n       [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 3 \:item/decision.id 1]\\r\\n       [\:db/add 3 \:item/user.id 123]\\r\\n       [\:db/add 3 \:item/id 3]\\r\\n       [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n       [\:db/add 3 \:item/weight 1] \\r\\n       [\:db/add 3 \:item/seq 1]\\r\\n       [\:db/add 4 \:item/decision.id 1]\\r\\n       [\:db/add 4 \:item/user.id 123]\\r\\n       [\:db/add 4 \:item/id 4]\\r\\n       [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n       [\:db/add 4 \:item/weight 1]\\r\\n       [\:db/add 4 \:item/seq 2]\\r\\n       [\:db/add 5 \:category/user.id 123]\\r\\n       [\:db/add 5 \:category/decision.id 1]\\r\\n       [\:db/add 5 \:category/id 5]\\r\\n       [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n       [\:db/add 5 \:category/weight 1]\\r\\n       [\:db/add 5 \:category/seq 1]\\r\\n       [\:db/add 6 \:category/user.id 123]\\r\\n       [\:db/add 6 \:category/decision.id 1]\\r\\n       [\:db/add 6 \:category/id 6]\\r\\n       [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n       [\:db/add 6 \:category/weight 1]\\r\\n       [\:db/add 6 \:category/seq 2]\\r\\n       [\:db/add 7 \:rule/user.id 123]\\r\\n       [\:db/add 7 \:rule/decision.id 1]\\r\\n       [\:db/add 7 \:rule/id 7]\\r\\n       [\:db/add 7 \:rule/item.one.id 1]\\r\\n       [\:db/add 7 \:rule/item.two.id 2]\\r\\n       [\:db/add 7 \:rule/category.id 1]\\r\\n       [\:db/add 7 \:rule/item.result.id 1]\\r\\n       [\:db/add 8 \:rule/user.id 123]\\r\\n       [\:db/add 8 \:rule/decision.id 1]\\r\\n       [\:db/add 8 \:rule/id 8]\\r\\n       [\:db/add 8 \:rule/item.one.id 1]\\r\\n       [\:db/add 8 \:rule/item.two.id 2]\\r\\n       [\:db/add 8 \:rule/category.id 2]\\r\\n       [\:db/add 8 \:rule/item.result.id 2]\\r\\n       [\:db/add 52 \:decision/id 52]\\r\\n       [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n       [\:db/add 52 \:decision/user.id 123]\\r\\n       [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n       [\:db/add 53 \:item/decision.id 52]\\r\\n       [\:db/add 53 \:item/user.id 123]\\r\\n       [\:db/add 53 \:item/id 53]\\r\\n       [\:db/add 53 \:item/name \\"F150\\"]\\r\\n       [\:db/add 53 \:item/weight 1] \\r\\n       [\:db/add 53 \:item/seq 1]\\r\\n       [\:db/add 54 \:item/decision.id 52]\\r\\n       [\:db/add 54 \:item/user.id 123]\\r\\n       [\:db/add 54 \:item/id 54]\\r\\n       [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n       [\:db/add 54 \:item/weight 1]\\r\\n       [\:db/add 54 \:item/seq 2]\\r\\n       [\:db/add 55 \:category/user.id 123]\\r\\n       [\:db/add 55 \:category/decision.id 52]\\r\\n       [\:db/add 55 \:category/id 55]\\r\\n       [\:db/add 55 \:category/name \\"Load\\"]\\r\\n       [\:db/add 55 \:category/weight 1]\\r\\n       [\:db/add 55 \:category/seq 1]\\r\\n       [\:db/add 56 \:rule/user.id 123]\\r\\n       [\:db/add 56 \:rule/decision.id 52]\\r\\n       [\:db/add 56 \:rule/id 56]\\r\\n       [\:db/add 56 \:rule/item.one.id 1]\\r\\n       [\:db/add 56 \:rule/item.two.id 2]\\r\\n       [\:db/add 56 \:rule/category.id 1]\\r\\n       [\:db/add 56 \:rule/item.result.id 1]]))))" "(reset\! db (datascript/db-with db [{\:decision/id 53\\r\\n                        \:decision/name \\"booty\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}]))" "(reset\! db (datascript/db-with db [{\:decision/id 54\\r\\n                        \:decision/name \\"booty\\"\\r\\n                        \:decision/user.id 123\\r\\n                        \:decision/complete-perc 0.9}]))" "(reset\! db (datascript/db-with @db [{\:decision/id 54\\r\\n                                    \:decision/name \\"booty\\"\\r\\n                                    \:decision/user.id 123\\r\\n                                    \:decision/complete-perc 0.9}]))" "(defn new-decision [dec-name]\\n  (reset\! db (datascript/db-with @db [{\:decision/id {db/id -1}\\r\\n                                       \:decision/name dec-name\\r\\n                                       \:decision/user.id 123\\r\\n                                       \:decision/complete-perc 0.9}])))" "(defn new-decision [dec-name]\\n  (reset\! db (datascript/db-with @db [{\:decision/id {\:db/id -1}\\r\\n                                       \:decision/name dec-name\\r\\n                                       \:decision/user.id 123\\r\\n                                       \:decision/complete-perc 0.9}])))" "(new-decision \\"Pizza\\")" "(get-local-dec-list)" ";move to persistance\\r\\n(defn get-item-list [dec-id]\\r\\n  (map \#(item. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\r\\n                       [?e \:item/weight ?weight]\\r\\n                       [?e \:item/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:category/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-decide-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3) (nth % 4))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?user-id]\\r\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] @db dec-id user-id)))" "(get-local-dec-list)" "(def user-id 123) ; needs to come from from config durring installation\\r\\n\\r\\n(def db (atom nil)) ;database \\r\\n\\r\\n; move to tools\\r\\n(defrecord item [id\\r\\n                 name \\r\\n                 seq\\r\\n                 weight])\\r\\n; move to tools\\r\\n(defrecord category [id\\r\\n                     name \\r\\n                     seq\\r\\n                     weight])\\r\\n; move to tools\\r\\n(defrecord summary-decision [name\\r\\n                             name-id\\r\\n                             perc-comp])\\r\\n\\r\\n(defrecord decision-result [id \\r\\n                            item-one \\r\\n                            item-two \\r\\n                            category \\r\\n                            result])\\r\\n\\r\\n;new namespace schema\\r\\n(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:item/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/id {\:db/unique \:db.unique/identity}\\r\\n   \:item/name {}\\r\\n   \:item/weight {}\\r\\n   \:item/seq {}\\r\\n   \:category/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/id  {\:db/unique \:db.unique/identity}\\r\\n   \:category/name {}\\r\\n   \:category/weight {}\\r\\n   \:category/seq {}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/id {\:db/unique \:db.unique/identity}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}})\\r\\n\\r\\n\\r\\n;new name space schma\\r\\n\\r\\n(reset\! db\\r\\n        (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with\\r\\n            [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n             [\:db/add 1 \:user/id 123]\\r\\n             [\:db/add 2 \:decision/id 1]\\r\\n             [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n             [\:db/add 2 \:decision/user.id 123]\\r\\n             [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 3 \:item/decision.id 1]\\r\\n             [\:db/add 3 \:item/user.id 123]\\r\\n             [\:db/add 3 \:item/id 3]\\r\\n             [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n             [\:db/add 3 \:item/weight 1] \\r\\n             [\:db/add 3 \:item/seq 1]\\r\\n             [\:db/add 4 \:item/decision.id 1]\\r\\n             [\:db/add 4 \:item/user.id 123]\\r\\n             [\:db/add 4 \:item/id 4]\\r\\n             [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n             [\:db/add 4 \:item/weight 1]\\r\\n             [\:db/add 4 \:item/seq 2]\\r\\n             [\:db/add 5 \:category/user.id 123]\\r\\n             [\:db/add 5 \:category/decision.id 1]\\r\\n             [\:db/add 5 \:category/id 5]\\r\\n             [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n             [\:db/add 5 \:category/weight 1]\\r\\n             [\:db/add 5 \:category/seq 1]\\r\\n             [\:db/add 6 \:category/user.id 123]\\r\\n             [\:db/add 6 \:category/decision.id 1]\\r\\n             [\:db/add 6 \:category/id 6]\\r\\n             [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n             [\:db/add 6 \:category/weight 1]\\r\\n             [\:db/add 6 \:category/seq 2]\\r\\n             [\:db/add 7 \:rule/user.id 123]\\r\\n             [\:db/add 7 \:rule/decision.id 1]\\r\\n             [\:db/add 7 \:rule/id 7]\\r\\n             [\:db/add 7 \:rule/item.one.id 1]\\r\\n             [\:db/add 7 \:rule/item.two.id 2]\\r\\n             [\:db/add 7 \:rule/category.id 1]\\r\\n             [\:db/add 7 \:rule/item.result.id 1]\\r\\n             [\:db/add 8 \:rule/user.id 123]\\r\\n             [\:db/add 8 \:rule/decision.id 1]\\r\\n             [\:db/add 8 \:rule/id 8]\\r\\n             [\:db/add 8 \:rule/item.one.id 1]\\r\\n             [\:db/add 8 \:rule/item.two.id 2]\\r\\n             [\:db/add 8 \:rule/category.id 2]\\r\\n             [\:db/add 8 \:rule/item.result.id 2]\\r\\n             [\:db/add 52 \:decision/id 52]\\r\\n             [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n             [\:db/add 52 \:decision/user.id 123]\\r\\n             [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 53 \:item/decision.id 52]\\r\\n             [\:db/add 53 \:item/user.id 123]\\r\\n             [\:db/add 53 \:item/id 53]\\r\\n             [\:db/add 53 \:item/name \\"F150\\"]\\r\\n             [\:db/add 53 \:item/weight 1] \\r\\n             [\:db/add 53 \:item/seq 1]\\r\\n             [\:db/add 54 \:item/decision.id 52]\\r\\n             [\:db/add 54 \:item/user.id 123]\\r\\n             [\:db/add 54 \:item/id 54]\\r\\n             [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n             [\:db/add 54 \:item/weight 1]\\r\\n             [\:db/add 54 \:item/seq 2]\\r\\n             [\:db/add 55 \:category/user.id 123]\\r\\n             [\:db/add 55 \:category/decision.id 52]\\r\\n             [\:db/add 55 \:category/id 55]\\r\\n             [\:db/add 55 \:category/name \\"Load\\"]\\r\\n             [\:db/add 55 \:category/weight 1]\\r\\n             [\:db/add 55 \:category/seq 1]\\r\\n             [\:db/add 56 \:rule/user.id 123]\\r\\n             [\:db/add 56 \:rule/decision.id 52]\\r\\n             [\:db/add 56 \:rule/id 56]\\r\\n             [\:db/add 56 \:rule/item.one.id 1]\\r\\n             [\:db/add 56 \:rule/item.two.id 2]\\r\\n             [\:db/add 56 \:rule/category.id 1]\\r\\n             [\:db/add 56 \:rule/item.result.id 1]])))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-local-dec-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-item-list [dec-id]\\r\\n  (map \#(item. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\r\\n                       [?e \:item/weight ?weight]\\r\\n                       [?e \:item/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:category/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-decide-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3) (nth % 4))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?user-id]\\r\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] @db dec-id user-id)))\\r\\n\\r\\n(defn new-decision [dec-name]\\r\\n  (reset\! db (datascript/db-with @db [{\:decision/id {\:db/id -1}\\r\\n                                       \:decision/name dec-name\\r\\n                                       \:decision/user.id user-id\\r\\n                                       \:decision/complete-perc 0.0}])))" "(get-local-dec-list)" "(new-decision \\"Pizza\\")" "(get-local-dec-list)" "(defn new-decision [item dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\n                                       \:item/decision.id dec-id\\n                                       \:item/id {\:db/id -1}\\r\\n                                       \:item/name item-name\\r\\n                                       \:item/weight nil\\r\\n                                       \:item/seq nil}])))" "(defn new-decision [item-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\n                                       \:item/decision.id dec-id\\n                                       \:item/id {\:db/id -1}\\r\\n                                       \:item/name item-name\\r\\n                                       \:item/weight nil\\r\\n                                       \:item/seq nil}])))" "(defn new-item [item-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\n                                       \:item/decision.id dec-id\\n                                       \:item/id {\:db/id -1}\\r\\n                                       \:item/name item-name\\r\\n                                       \:item/weight nil\\r\\n                                       \:item/seq nil}])))" "(new-item \\"Dominos\\" 3)" "(defn new-item [item-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\n                                       \:item/decision.id dec-id\\n                                       \:item/id {\:db/id -1}\\r\\n                                       \:item/name item-name\\r\\n                                       \:item/weight -1\\r\\n                                       \:item/seq -1}])))" "(new-item \\"Dominos\\" 3)" "(get-item-list 3)" "(defn new-item [item-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:category/user.id user-id\\r\\n                                       \:category/decision.id dec-id\\r\\n                                       \:category/id {\:db/id -1}\\r\\n                                       \:category/name item-name\\r\\n                                       \:category/weight -1\\r\\n                                       \:category/seq -1}])))" "(defn new-category [item-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:category/user.id user-id\\r\\n                                       \:category/decision.id dec-id\\r\\n                                       \:category/id {\:db/id -1}\\r\\n                                       \:category/name item-name\\r\\n                                       \:category/weight -1\\r\\n                                       \:category/seq -1}])))" "(new-category \\"Speed\\" 3)" "(get-category-list 3)" "(defn new-category [category-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:category/user.id user-id\\r\\n                                       \:category/decision.id dec-id\\r\\n                                       \:category/id {\:db/id -1}\\r\\n                                       \:category/name category-name\\r\\n                                       \:category/weight -1\\r\\n                                       \:category/seq -1}])))" "(defn new-rule [item-one item-two cat result]\\r\\n  (reset\! db (datascript/db-with @db [{\:rule/user.id user-id\\r\\n                                       \:rule/decision.id dec-id\\r\\n                                       \:rule/id {\:db/id -1}\\r\\n                                       \:rule/item.one.id item-one\\r\\n                                       \:rule/item.two.id item-two\\n                                       \:rule/category.id cat\\r\\n                                       \:rule/item.result.id result}])))" "(defn new-rule [dec-id item-one item-two cat result]\\r\\n  (reset\! db (datascript/db-with @db [{\:rule/user.id user-id\\r\\n                                       \:rule/decision.id dec-id\\r\\n                                       \:rule/id {\:db/id -1}\\r\\n                                       \:rule/item.one.id item-one\\r\\n                                       \:rule/item.two.id item-two\\n                                       \:rule/category.id cat\\r\\n                                       \:rule/item.result.id result}])))" "(new new-rule 3 1 2 1 1)" "(new-rule 3 1 2 1 1)" "(get-decide-list 3)" "(datascript.pull-api)" ";new namespace schema\\r\\n(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:decision/deleted? {}\\r\\n   \:item/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/id {\:db/unique \:db.unique/identity}\\r\\n   \:item/name {}\\r\\n   \:item/weight {}\\r\\n   \:item/seq {}\\r\\n   \:item/deleted? {}\\r\\n   \:category/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/id  {\:db/unique \:db.unique/identity}\\r\\n   \:category/name {}\\r\\n   \:category/weight {}\\r\\n   \:category/seq {}\\r\\n   \:category/deleted? {}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/id {\:db/unique \:db.unique/identity}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/deleted? {}})" "\\r\\n(reset\! db\\r\\n        (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with\\r\\n            [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n             [\:db/add 1 \:user/id 123]\\r\\n             [\:db/add 2 \:decision/id 1]\\r\\n             [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n             [\:db/add 2 \:decision/user.id 123]\\r\\n             [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 2 \:decision/deleted? false]\\r\\n             [\:db/add 3 \:item/decision.id 1]\\r\\n             [\:db/add 3 \:item/user.id 123]\\r\\n             [\:db/add 3 \:item/id 3]\\r\\n             [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n             [\:db/add 3 \:item/weight 1] \\r\\n             [\:db/add 3 \:item/seq 1]\\r\\n             [\:db/add 3 \:item/deleted? false]\\r\\n             [\:db/add 4 \:item/decision.id 1]\\r\\n             [\:db/add 4 \:item/user.id 123]\\r\\n             [\:db/add 4 \:item/id 4]\\r\\n             [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n             [\:db/add 4 \:item/weight 1]\\r\\n             [\:db/add 4 \:item/seq 2]\\r\\n             [\:db/add 4 \:item/deleted? false]\\r\\n             [\:db/add 5 \:category/user.id 123]\\r\\n             [\:db/add 5 \:category/decision.id 1]\\r\\n             [\:db/add 5 \:category/id 5]\\r\\n             [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n             [\:db/add 5 \:category/weight 1]\\r\\n             [\:db/add 5 \:category/seq 1]\\r\\n             [\:db/add 6 \:category/user.id 123]\\r\\n             [\:db/add 6 \:category/decision.id 1]\\r\\n             [\:db/add 6 \:category/id 6]\\r\\n             [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n             [\:db/add 6 \:category/weight 1]\\r\\n             [\:db/add 6 \:category/seq 2]\\r\\n             [\:db/add 7 \:rule/user.id 123]\\r\\n             [\:db/add 7 \:rule/decision.id 1]\\r\\n             [\:db/add 7 \:rule/id 7]\\r\\n             [\:db/add 7 \:rule/item.one.id 1]\\r\\n             [\:db/add 7 \:rule/item.two.id 2]\\r\\n             [\:db/add 7 \:rule/category.id 1]\\r\\n             [\:db/add 7 \:rule/item.result.id 1]\\r\\n             [\:db/add 8 \:rule/user.id 123]\\r\\n             [\:db/add 8 \:rule/decision.id 1]\\r\\n             [\:db/add 8 \:rule/id 8]\\r\\n             [\:db/add 8 \:rule/item.one.id 1]\\r\\n             [\:db/add 8 \:rule/item.two.id 2]\\r\\n             [\:db/add 8 \:rule/category.id 2]\\r\\n             [\:db/add 8 \:rule/item.result.id 2]\\r\\n             [\:db/add 52 \:decision/id 52]\\r\\n             [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n             [\:db/add 52 \:decision/user.id 123]\\r\\n             [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 53 \:item/decision.id 52]\\r\\n             [\:db/add 53 \:item/user.id 123]\\r\\n             [\:db/add 53 \:item/id 53]\\r\\n             [\:db/add 53 \:item/name \\"F150\\"]\\r\\n             [\:db/add 53 \:item/weight 1] \\r\\n             [\:db/add 53 \:item/seq 1]\\r\\n             [\:db/add 54 \:item/decision.id 52]\\r\\n             [\:db/add 54 \:item/user.id 123]\\r\\n             [\:db/add 54 \:item/id 54]\\r\\n             [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n             [\:db/add 54 \:item/weight 1]\\r\\n             [\:db/add 54 \:item/seq 2]\\r\\n             [\:db/add 55 \:category/user.id 123]\\r\\n             [\:db/add 55 \:category/decision.id 52]\\r\\n             [\:db/add 55 \:category/id 55]\\r\\n             [\:db/add 55 \:category/name \\"Load\\"]\\r\\n             [\:db/add 55 \:category/weight 1]\\r\\n             [\:db/add 55 \:category/seq 1]\\r\\n             [\:db/add 56 \:rule/user.id 123]\\r\\n             [\:db/add 56 \:rule/decision.id 52]\\r\\n             [\:db/add 56 \:rule/id 56]\\r\\n             [\:db/add 56 \:rule/item.one.id 1]\\r\\n             [\:db/add 56 \:rule/item.two.id 2]\\r\\n             [\:db/add 56 \:rule/category.id 1]\\r\\n             [\:db/add 56 \:rule/item.result.id 1]])))" "(reset\! db\\r\\n        (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with\\r\\n            [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n             [\:db/add 1 \:user/id 123]\\r\\n             [\:db/add 2 \:decision/id 1]\\r\\n             [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n             [\:db/add 2 \:decision/user.id 123]\\r\\n             [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 2 \:decision/deleted? false]\\r\\n             [\:db/add 3 \:item/decision.id 1]\\r\\n             [\:db/add 3 \:item/user.id 123]\\r\\n             [\:db/add 3 \:item/id 3]\\r\\n             [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n             [\:db/add 3 \:item/weight 1] \\r\\n             [\:db/add 3 \:item/seq 1]\\r\\n             [\:db/add 3 \:item/deleted? false]\\r\\n             [\:db/add 4 \:item/decision.id 1]\\r\\n             [\:db/add 4 \:item/user.id 123]\\r\\n             [\:db/add 4 \:item/id 4]\\r\\n             [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n             [\:db/add 4 \:item/weight 1]\\r\\n             [\:db/add 4 \:item/seq 2]\\r\\n             [\:db/add 4 \:item/deleted? false]\\r\\n             [\:db/add 5 \:category/user.id 123]\\r\\n             [\:db/add 5 \:category/decision.id 1]\\r\\n             [\:db/add 5 \:category/id 5]\\r\\n             [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n             [\:db/add 5 \:category/weight 1]\\r\\n             [\:db/add 5 \:category/seq 1]\\r\\n             [\:db/add 5 \:category/deleted? false]\\r\\n             [\:db/add 6 \:category/user.id 123]\\r\\n             [\:db/add 6 \:category/decision.id 1]\\r\\n             [\:db/add 6 \:category/id 6]\\r\\n             [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n             [\:db/add 6 \:category/weight 1]\\r\\n             [\:db/add 6 \:category/seq 2]\\r\\n             [\:db/add 7 \:rule/user.id 123]\\r\\n             [\:db/add 7 \:rule/decision.id 1]\\r\\n             [\:db/add 7 \:rule/id 7]\\r\\n             [\:db/add 7 \:rule/item.one.id 1]\\r\\n             [\:db/add 7 \:rule/item.two.id 2]\\r\\n             [\:db/add 7 \:rule/category.id 1]\\r\\n             [\:db/add 7 \:rule/item.result.id 1]\\r\\n             [\:db/add 7 \:rule/deleted? false]\\r\\n             [\:db/add 8 \:rule/user.id 123]\\r\\n             [\:db/add 8 \:rule/decision.id 1]\\r\\n             [\:db/add 8 \:rule/id 8]\\r\\n             [\:db/add 8 \:rule/item.one.id 1]\\r\\n             [\:db/add 8 \:rule/item.two.id 2]\\r\\n             [\:db/add 8 \:rule/category.id 2]\\r\\n             [\:db/add 8 \:rule/item.result.id 2]\\r\\n             [\:db/add 8 \:rule/deleted? false]\\r\\n             [\:db/add 52 \:decision/id 52]\\r\\n             [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n             [\:db/add 52 \:decision/user.id 123]\\r\\n             [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 52 \:decision/deleted? false]\\r\\n             [\:db/add 53 \:item/decision.id 52]\\r\\n             [\:db/add 53 \:item/user.id 123]\\r\\n             [\:db/add 53 \:item/id 53]\\r\\n             [\:db/add 53 \:item/name \\"F150\\"]\\r\\n             [\:db/add 53 \:item/weight 1] \\r\\n             [\:db/add 53 \:item/seq 1]\\r\\n             [\:db/add 53 item/deleted? false]\\r\\n             [\:db/add 54 \:item/decision.id 52]\\r\\n             [\:db/add 54 \:item/user.id 123]\\r\\n             [\:db/add 54 \:item/id 54]\\r\\n             [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n             [\:db/add 54 \:item/weight 1]\\r\\n             [\:db/add 54 \:item/seq 2]\\r\\n             [\:db/add 54 \:item/deleted? false]\\r\\n             [\:db/add 55 \:category/user.id 123]\\r\\n             [\:db/add 55 \:category/decision.id 52]\\r\\n             [\:db/add 55 \:category/id 55]\\r\\n             [\:db/add 55 \:category/name \\"Load\\"]\\r\\n             [\:db/add 55 \:category/weight 1]\\r\\n             [\:db/add 55 \:category/seq 1]\\r\\n             [\:db/add 55 \:category/deleted? false]\\r\\n             [\:db/add 56 \:rule/user.id 123]\\r\\n             [\:db/add 56 \:rule/decision.id 52]\\r\\n             [\:db/add 56 \:rule/id 56]\\r\\n             [\:db/add 56 \:rule/item.one.id 1]\\r\\n             [\:db/add 56 \:rule/item.two.id 2]\\r\\n             [\:db/add 56 \:rule/category.id 1]\\r\\n             [\:db/add 56 \:rule/item.result.id 1]\\r\\n             [\:db/add 56 \:rule/deleted? false]])))" "(reset\! db\\r\\n        (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with\\r\\n            [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n             [\:db/add 1 \:user/id 123]\\r\\n             [\:db/add 2 \:decision/id 1]\\r\\n             [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n             [\:db/add 2 \:decision/user.id 123]\\r\\n             [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 2 \:decision/deleted? false]\\r\\n             [\:db/add 3 \:item/decision.id 1]\\r\\n             [\:db/add 3 \:item/user.id 123]\\r\\n             [\:db/add 3 \:item/id 3]\\r\\n             [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n             [\:db/add 3 \:item/weight 1] \\r\\n             [\:db/add 3 \:item/seq 1]\\r\\n             [\:db/add 3 \:item/deleted? false]\\r\\n             [\:db/add 4 \:item/decision.id 1]\\r\\n             [\:db/add 4 \:item/user.id 123]\\r\\n             [\:db/add 4 \:item/id 4]\\r\\n             [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n             [\:db/add 4 \:item/weight 1]\\r\\n             [\:db/add 4 \:item/seq 2]\\r\\n             [\:db/add 4 \:item/deleted? false]\\r\\n             [\:db/add 5 \:category/user.id 123]\\r\\n             [\:db/add 5 \:category/decision.id 1]\\r\\n             [\:db/add 5 \:category/id 5]\\r\\n             [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n             [\:db/add 5 \:category/weight 1]\\r\\n             [\:db/add 5 \:category/seq 1]\\r\\n             [\:db/add 5 \:category/deleted? false]\\r\\n             [\:db/add 6 \:category/user.id 123]\\r\\n             [\:db/add 6 \:category/decision.id 1]\\r\\n             [\:db/add 6 \:category/id 6]\\r\\n             [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n             [\:db/add 6 \:category/weight 1]\\r\\n             [\:db/add 6 \:category/seq 2]\\r\\n             [\:db/add 7 \:rule/user.id 123]\\r\\n             [\:db/add 7 \:rule/decision.id 1]\\r\\n             [\:db/add 7 \:rule/id 7]\\r\\n             [\:db/add 7 \:rule/item.one.id 1]\\r\\n             [\:db/add 7 \:rule/item.two.id 2]\\r\\n             [\:db/add 7 \:rule/category.id 1]\\r\\n             [\:db/add 7 \:rule/item.result.id 1]\\r\\n             [\:db/add 7 \:rule/deleted? false]\\r\\n             [\:db/add 8 \:rule/user.id 123]\\r\\n             [\:db/add 8 \:rule/decision.id 1]\\r\\n             [\:db/add 8 \:rule/id 8]\\r\\n             [\:db/add 8 \:rule/item.one.id 1]\\r\\n             [\:db/add 8 \:rule/item.two.id 2]\\r\\n             [\:db/add 8 \:rule/category.id 2]\\r\\n             [\:db/add 8 \:rule/item.result.id 2]\\r\\n             [\:db/add 8 \:rule/deleted? false]\\r\\n             [\:db/add 52 \:decision/id 52]\\r\\n             [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n             [\:db/add 52 \:decision/user.id 123]\\r\\n             [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 52 \:decision/deleted? false]\\r\\n             [\:db/add 53 \:item/decision.id 52]\\r\\n             [\:db/add 53 \:item/user.id 123]\\r\\n             [\:db/add 53 \:item/id 53]\\r\\n             [\:db/add 53 \:item/name \\"F150\\"]\\r\\n             [\:db/add 53 \:item/weight 1] \\r\\n             [\:db/add 53 \:item/seq 1]\\r\\n             [\:db/add 53 \:item/deleted? false]\\r\\n             [\:db/add 54 \:item/decision.id 52]\\r\\n             [\:db/add 54 \:item/user.id 123]\\r\\n             [\:db/add 54 \:item/id 54]\\r\\n             [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n             [\:db/add 54 \:item/weight 1]\\r\\n             [\:db/add 54 \:item/seq 2]\\r\\n             [\:db/add 54 \:item/deleted? false]\\r\\n             [\:db/add 55 \:category/user.id 123]\\r\\n             [\:db/add 55 \:category/decision.id 52]\\r\\n             [\:db/add 55 \:category/id 55]\\r\\n             [\:db/add 55 \:category/name \\"Load\\"]\\r\\n             [\:db/add 55 \:category/weight 1]\\r\\n             [\:db/add 55 \:category/seq 1]\\r\\n             [\:db/add 55 \:category/deleted? false]\\r\\n             [\:db/add 56 \:rule/user.id 123]\\r\\n             [\:db/add 56 \:rule/decision.id 52]\\r\\n             [\:db/add 56 \:rule/id 56]\\r\\n             [\:db/add 56 \:rule/item.one.id 1]\\r\\n             [\:db/add 56 \:rule/item.two.id 2]\\r\\n             [\:db/add 56 \:rule/category.id 1]\\r\\n             [\:db/add 56 \:rule/item.result.id 1]\\r\\n             [\:db/add 56 \:rule/deleted? false]])))" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? false]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list)" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? true]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? true]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? false]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?d \:decision/deleted? false]\\r\\n                       [?d \:decision/name ?name]\\r\\n                       [?d \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?d \:decision/deleted? true]\\r\\n                       [?d \:decision/name ?name]\\r\\n                       [?d \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [\= \:decision/id ?id]\\r\\n                       [?d \:decision/deleted? true]\\r\\n                       [?d \:decision/name ?name]\\r\\n                       [?d \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [\= \:decision/deleted? false]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [\= \:decision/deleted? true]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [\= ?del true]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [\= ?del true]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decide-list )" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [\= ?del true]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decision-list )" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [\= ?del false]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decision-list )" "\\r\\n(def user-id 123) ; needs to come from from config durring installation\\r\\n\\r\\n(def db (atom nil)) ;database \\r\\n\\r\\n; move to tools\\r\\n(defrecord item [id\\r\\n                 name \\r\\n                 seq\\r\\n                 weight])\\r\\n; move to tools\\r\\n(defrecord category [id\\r\\n                     name \\r\\n                     seq\\r\\n                     weight])\\r\\n; move to tools\\r\\n(defrecord summary-decision [name\\r\\n                             name-id\\r\\n                             perc-comp])\\r\\n\\r\\n(defrecord decision-result [id \\r\\n                            item-one \\r\\n                            item-two \\r\\n                            category \\r\\n                            result])\\r\\n\\r\\n;new namespace schema\\r\\n(def schema\\r\\n  {\:user/id {\:db/unique \:db.unique/identity}  \\r\\n   \:user/name {}\\r\\n   \:decision/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:decision/id {\:db/unique \:db.unique/identity}\\r\\n   \:decision/name {} \\r\\n   \:decision/complete-perc {}\\r\\n   \:decision/deleted? {}\\r\\n   \:item/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:item/id {\:db/unique \:db.unique/identity}\\r\\n   \:item/name {}\\r\\n   \:item/weight {}\\r\\n   \:item/seq {}\\r\\n   \:item/deleted? {}\\r\\n   \:category/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:category/id  {\:db/unique \:db.unique/identity}\\r\\n   \:category/name {}\\r\\n   \:category/weight {}\\r\\n   \:category/seq {}\\r\\n   \:category/deleted? {}\\r\\n   \:rule/user.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/decision.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/id {\:db/unique \:db.unique/identity}\\r\\n   \:rule/item.one.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.two.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/category.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/item.result.id {\:db/valueType \:db.type/ref}\\r\\n   \:rule/deleted? {}})\\r\\n\\r\\n\\r\\n;new name space schma\\r\\n\\r\\n(reset\! db\\r\\n        (-> (datascript/empty-db schema)\\r\\n          (datascript/db-with\\r\\n            [[\:db/add 1 \:user/name \\"Don\\"]\\r\\n             [\:db/add 1 \:user/id 123]\\r\\n             [\:db/add 2 \:decision/id 1]\\r\\n             [\:db/add 2 \:decision/name \\"Car\\"]\\r\\n             [\:db/add 2 \:decision/user.id 123]\\r\\n             [\:db/add 2 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 2 \:decision/deleted? false]\\r\\n             [\:db/add 3 \:item/decision.id 1]\\r\\n             [\:db/add 3 \:item/user.id 123]\\r\\n             [\:db/add 3 \:item/id 3]\\r\\n             [\:db/add 3 \:item/name \\"Audi\\"]\\r\\n             [\:db/add 3 \:item/weight 1] \\r\\n             [\:db/add 3 \:item/seq 1]\\r\\n             [\:db/add 3 \:item/deleted? false]\\r\\n             [\:db/add 4 \:item/decision.id 1]\\r\\n             [\:db/add 4 \:item/user.id 123]\\r\\n             [\:db/add 4 \:item/id 4]\\r\\n             [\:db/add 4 \:item/name \\"BMW\\"]\\r\\n             [\:db/add 4 \:item/weight 1]\\r\\n             [\:db/add 4 \:item/seq 2]\\r\\n             [\:db/add 4 \:item/deleted? false]\\r\\n             [\:db/add 5 \:category/user.id 123]\\r\\n             [\:db/add 5 \:category/decision.id 1]\\r\\n             [\:db/add 5 \:category/id 5]\\r\\n             [\:db/add 5 \:category/name \\"MPG\\"]\\r\\n             [\:db/add 5 \:category/weight 1]\\r\\n             [\:db/add 5 \:category/seq 1]\\r\\n             [\:db/add 5 \:category/deleted? false]\\r\\n             [\:db/add 6 \:category/user.id 123]\\r\\n             [\:db/add 6 \:category/decision.id 1]\\r\\n             [\:db/add 6 \:category/id 6]\\r\\n             [\:db/add 6 \:category/name \\"Acceleration\\"]\\r\\n             [\:db/add 6 \:category/weight 1]\\r\\n             [\:db/add 6 \:category/seq 2]\\r\\n             [\:db/add 7 \:rule/user.id 123]\\r\\n             [\:db/add 7 \:rule/decision.id 1]\\r\\n             [\:db/add 7 \:rule/id 7]\\r\\n             [\:db/add 7 \:rule/item.one.id 1]\\r\\n             [\:db/add 7 \:rule/item.two.id 2]\\r\\n             [\:db/add 7 \:rule/category.id 1]\\r\\n             [\:db/add 7 \:rule/item.result.id 1]\\r\\n             [\:db/add 7 \:rule/deleted? false]\\r\\n             [\:db/add 8 \:rule/user.id 123]\\r\\n             [\:db/add 8 \:rule/decision.id 1]\\r\\n             [\:db/add 8 \:rule/id 8]\\r\\n             [\:db/add 8 \:rule/item.one.id 1]\\r\\n             [\:db/add 8 \:rule/item.two.id 2]\\r\\n             [\:db/add 8 \:rule/category.id 2]\\r\\n             [\:db/add 8 \:rule/item.result.id 2]\\r\\n             [\:db/add 8 \:rule/deleted? false]\\r\\n             [\:db/add 52 \:decision/id 52]\\r\\n             [\:db/add 52 \:decision/name \\"Pet\\"]\\r\\n             [\:db/add 52 \:decision/user.id 123]\\r\\n             [\:db/add 52 \:decision/complete-perc 0.9]\\r\\n             [\:db/add 52 \:decision/deleted? false]\\r\\n             [\:db/add 53 \:item/decision.id 52]\\r\\n             [\:db/add 53 \:item/user.id 123]\\r\\n             [\:db/add 53 \:item/id 53]\\r\\n             [\:db/add 53 \:item/name \\"F150\\"]\\r\\n             [\:db/add 53 \:item/weight 1] \\r\\n             [\:db/add 53 \:item/seq 1]\\r\\n             [\:db/add 53 \:item/deleted? false]\\r\\n             [\:db/add 54 \:item/decision.id 52]\\r\\n             [\:db/add 54 \:item/user.id 123]\\r\\n             [\:db/add 54 \:item/id 54]\\r\\n             [\:db/add 54 \:item/name \\"Ram\\"]\\r\\n             [\:db/add 54 \:item/weight 1]\\r\\n             [\:db/add 54 \:item/seq 2]\\r\\n             [\:db/add 54 \:item/deleted? false]\\r\\n             [\:db/add 55 \:category/user.id 123]\\r\\n             [\:db/add 55 \:category/decision.id 52]\\r\\n             [\:db/add 55 \:category/id 55]\\r\\n             [\:db/add 55 \:category/name \\"Load\\"]\\r\\n             [\:db/add 55 \:category/weight 1]\\r\\n             [\:db/add 55 \:category/seq 1]\\r\\n             [\:db/add 55 \:category/deleted? false]\\r\\n             [\:db/add 56 \:rule/user.id 123]\\r\\n             [\:db/add 56 \:rule/decision.id 52]\\r\\n             [\:db/add 56 \:rule/id 56]\\r\\n             [\:db/add 56 \:rule/item.one.id 1]\\r\\n             [\:db/add 56 \:rule/item.two.id 2]\\r\\n             [\:db/add 56 \:rule/category.id 1]\\r\\n             [\:db/add 56 \:rule/item.result.id 1]\\r\\n             [\:db/add 56 \:rule/deleted? false]])))\\r\\n\\r\\n;move to persistance replaces get-local-dec-list\\r\\n(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? false]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-item-list [dec-id]\\r\\n  (map \#(item. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?user-id]\\r\\n                       [?e \:item/decision.id ?dec-id]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\r\\n                       [?e \:item/weight ?weight]\\r\\n                       [?e \:item/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:category/user.id ?user-id]\\r\\n                       [?e \:category/decision.id ?dec-id]\\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance replaces get-decide-list\\r\\n(defn get-rule-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3) (nth % 4))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?user-id]\\r\\n                       [?e \:rule/decision.id ?dec-id]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] @db dec-id user-id)))\\r\\n\\r\\n(defn new-decision [dec-name]\\r\\n  (reset\! db (datascript/db-with @db [{\:decision/id {\:db/id -1}\\r\\n                                       \:decision/name dec-name\\r\\n                                       \:decision/user.id user-id\\r\\n                                       \:decision/complete-perc 0.0}])))\\r\\n\\r\\n(defn new-item [item-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\r\\n                                       \:item/decision.id dec-id\\r\\n                                       \:item/id {\:db/id -1}\\r\\n                                       \:item/name item-name\\r\\n                                       \:item/weight -1\\r\\n                                       \:item/seq -1}])))\\r\\n\\r\\n (defn new-category [category-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:category/user.id user-id\\r\\n                                       \:category/decision.id dec-id\\r\\n                                       \:category/id {\:db/id -1}\\r\\n                                       \:category/name category-name\\r\\n                                       \:category/weight -1\\r\\n                                       \:category/seq -1}])))\\r\\n\\r\\n(defn new-rule [dec-id item-one item-two cat result]\\r\\n  (reset\! db (datascript/db-with @db [{\:rule/user.id user-id\\r\\n                                       \:rule/decision.id dec-id\\r\\n                                       \:rule/id {\:db/id -1}\\r\\n                                       \:rule/item.one.id item-one\\r\\n                                       \:rule/item.two.id item-two\\r\\n                                       \:rule/category.id cat\\r\\n                                       \:rule/item.result.id result}])))" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [\= ?del false]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decision-list )" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [\= ?del false]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decision-list )" "(datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                [\= ?del false]\\r\\n                       ;[?e \:decision/name ?name]\\r\\n                ;[?e \:decision/complete-perc ?complete-perc]\\n                ] @db user-id\\n              )" "(datascript/q '[\:find ?del\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                [\= ?del false]\\r\\n                       ;[?e \:decision/name ?name]\\r\\n                ;[?e \:decision/complete-perc ?complete-perc]\\n                ] @db user-id\\n              )" "(datascript/q '[\:find ?del\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n               ; [\= ?del false]\\r\\n                       ;[?e \:decision/name ?name]\\r\\n                ;[?e \:decision/complete-perc ?complete-perc]\\n                ] @db user-id\\n              )" "(datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n               ;        [\= ?del false]\\r\\n                       ;[?e \:decision/name ?name]\\r\\n                ;[?e \:decision/complete-perc ?complete-perc]\\n                ] @db user-id\\n              )" "(datascript/q '[\:find ?del\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n               ;        [\= ?del false]\\r\\n                       ;[?e \:decision/name ?name]\\r\\n                ;[?e \:decision/complete-perc ?complete-perc]\\n                ] @db user-id\\n              )" "(datascript/q '[\:find ?del\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [\= ?del false]\\r\\n                       ;[?e \:decision/name ?name]\\r\\n                ;[?e \:decision/complete-perc ?complete-perc]\\n                ] @db user-id\\n              )" "(datascript/q '[\:find ?del\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [(\= ?del false)]\\r\\n                       ;[?e \:decision/name ?name]\\r\\n                ;[?e \:decision/complete-perc ?complete-perc]\\n                ] @db user-id\\n              )" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [(\= ?del false)]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decision-list )" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?user-id]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?del]\\n                       [(\= ?del true)]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))" "(get-decision-list )" "(defn get-rule-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3) (nth % 4))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:rule/decision.id ?r-dec-id]\\r\\n                       [(\= ?r-dec-id dec-id)]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] @db dec-id user-id)))" "(get-rule-list 1)" "(datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                \:in $ ?dec-id ?user-id\\r\\n                \:where [?e \:rule/user.id ?r-user-id]\\r\\n                [(\= ?r-user-id ?user-id)]\\r\\n                [?e \:rule/decision.id ?r-dec-id]\\r\\n                [(\= ?r-dec-id dec-id)]\\r\\n                [?e \:rule/id ?id]\\r\\n                [?e \:rule/deleted? ?r-del]\\r\\n                [(\= ?r-del false)]\\r\\n                [?e \:rule/item.one.id ?one]\\r\\n                [?e \:rule/item.two.id ?two]\\r\\n                [?e \:rule/category.id ?cat]\\r\\n                [?e \:rule/item.result.id ?res]] @db 123)" "(datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                \:in $ ?dec-id ?user-id\\r\\n                \:where [?e \:rule/user.id ?r-user-id]\\r\\n                ;[(\= ?r-user-id ?user-id)]\\r\\n                [?e \:rule/decision.id ?r-dec-id]\\r\\n                [(\= ?r-dec-id dec-id)]\\r\\n                [?e \:rule/id ?id]\\r\\n                [?e \:rule/deleted? ?r-del]\\r\\n                [(\= ?r-del false)]\\r\\n                [?e \:rule/item.one.id ?one]\\r\\n                [?e \:rule/item.two.id ?two]\\r\\n                [?e \:rule/category.id ?cat]\\r\\n                [?e \:rule/item.result.id ?res]] @db 123)" "(datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                \:in $ ?dec-id ?user-id\\r\\n                \:where [?e \:rule/user.id ?r-user-id]\\r\\n                ;[(\= ?r-user-id ?user-id)]\\r\\n                [?e \:rule/decision.id ?r-dec-id]\\r\\n                ;[(\= ?r-dec-id dec-id)]\\r\\n                [?e \:rule/id ?id]\\r\\n                [?e \:rule/deleted? ?r-del]\\r\\n                [(\= ?r-del false)]\\r\\n                [?e \:rule/item.one.id ?one]\\r\\n                [?e \:rule/item.two.id ?two]\\r\\n                [?e \:rule/category.id ?cat]\\r\\n                [?e \:rule/item.result.id ?res]] @db 123)" "(datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                \:in $ ?dec-id ?user-id\\r\\n                \:where [?e \:rule/user.id ?r-user-id]\\r\\n                ;[(\= ?r-user-id ?user-id)]\\r\\n                [?e \:rule/decision.id ?r-dec-id]\\r\\n                ;[(\= ?r-dec-id dec-id)]\\r\\n                [?e \:rule/id ?id]\\r\\n                [?e \:rule/deleted? ?r-del]\\r\\n                [(\= ?r-del false)]\\r\\n                [?e \:rule/item.one.id ?one]\\r\\n                [?e \:rule/item.two.id ?two]\\r\\n                [?e \:rule/category.id ?cat]\\r\\n                [?e \:rule/item.result.id ?res]] @db 1 123)" "(datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                \:in $ ?dec-id ?user-id\\r\\n                \:where [?e \:rule/user.id ?r-user-id]\\r\\n                [(\= ?r-user-id ?user-id)]\\r\\n                [?e \:rule/decision.id ?r-dec-id]\\r\\n                ;[(\= ?r-dec-id dec-id)]\\r\\n                [?e \:rule/id ?id]\\r\\n                [?e \:rule/deleted? ?r-del]\\r\\n                [(\= ?r-del false)]\\r\\n                [?e \:rule/item.one.id ?one]\\r\\n                [?e \:rule/item.two.id ?two]\\r\\n                [?e \:rule/category.id ?cat]\\r\\n                [?e \:rule/item.result.id ?res]] @db 1 123)" "(datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                \:in $ ?dec-id ?user-id\\r\\n                \:where [?e \:rule/user.id ?r-user-id]\\r\\n                [(\= ?r-user-id ?user-id)]\\r\\n                [?e \:rule/decision.id ?r-dec-id]\\r\\n                ;[(\= ?r-dec-id dec-id)]\\r\\n                [?e \:rule/id ?id]\\r\\n                [?e \:rule/deleted? ?r-del]\\r\\n                [(\= ?r-del false)]\\r\\n                [?e \:rule/item.one.id ?one]\\r\\n                [?e \:rule/item.two.id ?two]\\r\\n                [?e \:rule/category.id ?cat]\\r\\n                [?e \:rule/item.result.id ?res]] @db 1 1234)" "(datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                \:in $ ?dec-id ?user-id\\r\\n                \:where [?e \:rule/user.id ?r-user-id]\\r\\n                [(\= ?r-user-id ?user-id)]\\r\\n                [?e \:rule/decision.id ?r-dec-id]\\r\\n                [(\= ?r-dec-id ?dec-id)]\\r\\n                [?e \:rule/id ?id]\\r\\n                [?e \:rule/deleted? ?r-del]\\r\\n                [(\= ?r-del false)]\\r\\n                [?e \:rule/item.one.id ?one]\\r\\n                [?e \:rule/item.two.id ?two]\\r\\n                [?e \:rule/category.id ?cat]\\r\\n                [?e \:rule/item.result.id ?res]] @db 1 123)" "(defn get-rule-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3) (nth % 4))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:rule/decision.id ?r-dec-id]\\r\\n                       [(\= ?r-dec-id ?dec-id)]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] @db dec-id user-id)))" "(get-rule-list 1)" "(get-rule-list 2)" "(get-rule-list 52)" "(defn get-rule-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3) (nth % 4))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:rule/decision.id ?r-dec-id]\\r\\n                       [(\= ?r-dec-id ?dec-id)]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/deleted? ?r-del]\\r\\n                       [(\= ?r-del true)]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] @db dec-id user-id)))" "(get-rule-list 52)" "(get-rule-list 1)" "(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-item-list [dec-id]\\r\\n  (map \#(item. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:item/decision.id ?r-dec-id]\\r\\n                       [(\= ?r-dec-id ?dec-id)]\\r\\n                       [?e \:item/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\r\\n                       [?e \:item/weight ?weight]\\r\\n                       [?e \:item/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:category/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:category/decision.id ?r-dec-id]\\r\\n                       [(\= ?r-dec-id ?dec-id)]\\r\\n                       [?e \:category/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)] \\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance replaces get-decide-list\\r\\n(defn get-rule-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3) (nth % 4))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:rule/decision.id ?r-dec-id]\\r\\n                       [(\= ?r-dec-id ?dec-id)]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] @db dec-id user-id)))\\r\\n\\r\\n(defn new-decision [dec-name]\\r\\n  (reset\! db (datascript/db-with @db [{\:decision/id {\:db/id -1}\\r\\n                                       \:decision/name dec-name\\r\\n                                       \:decision/user.id user-id\\r\\n                                       \:decision/complete-perc 0.0\\r\\n                                       \:decision/deleted? false}])))\\r\\n\\r\\n(defn new-item [item-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\r\\n                                       \:item/decision.id dec-id\\r\\n                                       \:item/id {\:db/id -1}\\r\\n                                       \:item/name item-name\\r\\n                                       \:item/weight -1\\r\\n                                       \:item/seq -1\\r\\n                                       \:item/deleted? false}])))\\r\\n\\r\\n (defn new-category [category-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:category/user.id user-id\\r\\n                                       \:category/decision.id dec-id\\r\\n                                       \:category/id {\:db/id -1}\\r\\n                                       \:category/name category-name\\r\\n                                       \:category/weight -1\\r\\n                                       \:category/seq -1\\r\\n                                       \:category/deleted? false}])))\\r\\n\\r\\n(defn new-rule [dec-id item-one item-two cat result]\\r\\n  (reset\! db (datascript/db-with @db [{\:rule/user.id user-id\\r\\n                                       \:rule/decision.id dec-id\\r\\n                                       \:rule/id {\:db/id -1}\\r\\n                                       \:rule/item.one.id item-one\\r\\n                                       \:rule/item.two.id item-two\\r\\n                                       \:rule/category.id cat\\r\\n                                       \:rule/item.result.id result\\r\\n                                       \:rule/deleted? false}])))" "(get-decision-list)" "(\:name-id (get-decision-list))" "(\:name-id (first (get-decision-list)))" "(defn delete-item [dec-id item-id]\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\r\\n                                       \:item/decision.id dec-id\\r\\n                                       \:item/id item-id\\r\\n                                       \:item/name item-name\\r\\n                                       \:item/weight -1\\r\\n                                       \:item/seq -1\\r\\n                                       \:item/deleted? true}])))" "(defn delete-item [dec-id item-id]\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\r\\n                                       \:item/decision.id dec-id\\r\\n                                       \:item/id item-id\\r\\n                                       \:item/name \\"removed\\"\\r\\n                                       \:item/weight -1\\r\\n                                       \:item/seq -1\\r\\n                                       \:item/deleted? true}])))" "(delete-item 1 1)" "(get-item-list 1)" "(delete-item 1 4)" "(get-item-list 1)" "(defn delete-item [dec-id item-id]\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\r\\n                                       \:item/decision.id dec-id\\r\\n                                       \:item/id item-id\\r\\n                                       \:item/deleted? true}])))" "(get-item-list 1)" "(delete-item 1 3)" "(get-item-list 1)" "\\r\\n;move to persistance replaces get-local-dec-list\\r\\n(defn get-decision-list []\\r\\n  (map \#(summary-decision. (first %) (second %) (nth % 2))\\r\\n       (datascript/q '[\:find ?name ?id ?complete-perc\\r\\n                       \:in $ ?user-id\\r\\n                       \:where [?e \:decision/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:decision/id ?id]\\r\\n                       [?e \:decision/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)]\\r\\n                       [?e \:decision/name ?name]\\r\\n                       [?e \:decision/complete-perc ?complete-perc]] @db user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-item-list [dec-id]\\r\\n  (map \#(item. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:item/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:item/decision.id ?r-dec-id]\\r\\n                       [(\= ?r-dec-id ?dec-id)]\\r\\n                       [?e \:item/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)]\\r\\n                       [?e \:item/id ?id]\\r\\n                       [?e \:item/name ?name]\\r\\n                       [?e \:item/weight ?weight]\\r\\n                       [?e \:item/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance\\r\\n(defn get-category-list [dec-id]\\r\\n  (map \#(category. (first %) (second %) (nth % 2) (nth % 3))\\r\\n       (datascript/q '[\:find ?id ?name ?seq ?weight\\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:category/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:category/decision.id ?r-dec-id]\\r\\n                       [(\= ?r-dec-id ?dec-id)]\\r\\n                       [?e \:category/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)] \\r\\n                       [?e \:category/id ?id]\\r\\n                       [?e \:category/name ?name]\\r\\n                       [?e \:category/weight ?weight]\\r\\n                       [?e \:category/seq ?seq]] @db dec-id user-id)))\\r\\n\\r\\n;move to persistance replaces get-decide-list\\r\\n(defn get-rule-list [dec-id]\\r\\n  (map \#(decision-result. (first %) (second %) (nth % 2) (nth % 3) (nth % 4))\\r\\n       (datascript/q '[\:find ?id ?one ?two ?cat ?res \\r\\n                       \:in $ ?dec-id ?user-id\\r\\n                       \:where [?e \:rule/user.id ?r-user-id]\\r\\n                       [(\= ?r-user-id ?user-id)]\\r\\n                       [?e \:rule/decision.id ?r-dec-id]\\r\\n                       [(\= ?r-dec-id ?dec-id)]\\r\\n                       [?e \:rule/id ?id]\\r\\n                       [?e \:rule/deleted? ?r-del]\\r\\n                       [(\= ?r-del false)]\\r\\n                       [?e \:rule/item.one.id ?one]\\r\\n                       [?e \:rule/item.two.id ?two]\\r\\n                       [?e \:rule/category.id ?cat]\\r\\n                       [?e \:rule/item.result.id ?res]] @db dec-id user-id)))\\r\\n\\r\\n(defn new-decision [dec-name]\\r\\n  (reset\! db (datascript/db-with @db [{\:decision/id {\:db/id -1}\\r\\n                                       \:decision/name dec-name\\r\\n                                       \:decision/user.id user-id\\r\\n                                       \:decision/complete-perc 0.0\\r\\n                                       \:decision/deleted? false}])))\\r\\n\\r\\n(defn update-decision [dec-id dec-name complete-perc]\\r\\n  (reset\! db (datascript/db-with @db [{\:decision/user.id user-id\\r\\n                                       \:decision/id dec-id\\r\\n                                       \:decision/name dec-name\\r\\n                                       \:decision/complete-perc complete-perc}])))\\r\\n\\r\\n\\r\\n(defn new-item [item-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\r\\n                                       \:item/decision.id dec-id\\r\\n                                       \:item/id {\:db/id -1}\\r\\n                                       \:item/name item-name\\r\\n                                       \:item/weight -1\\r\\n                                       \:item/seq -1\\r\\n                                       \:item/deleted? false}])))\\r\\n\\r\\n(defn update-item [dec-id item-id item-name weight seq]\\r\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\r\\n                                       \:item/decision.id dec-id\\r\\n                                       \:item/id item-id\\r\\n                                       \:item/name item-name\\r\\n                                       \:item/weight weight\\r\\n                                       \:item/seq seq}])))\\r\\n\\r\\n(defn new-category [category-name dec-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:category/user.id user-id\\r\\n                                       \:category/decision.id dec-id\\r\\n                                       \:category/id {\:db/id -1}\\r\\n                                       \:category/name category-name\\r\\n                                       \:category/weight -1\\r\\n                                       \:category/seq -1\\r\\n                                      \:category/deleted? false}])))\\r\\n\\r\\n (defn update-category [dec-id category-id category-name weight seq]\\r\\n  (reset\! db (datascript/db-with @db [{\:category/user.id user-id\\r\\n                                       \:category/decision.id dec-id\\r\\n                                       \:category/id category-id\\r\\n                                       \:category/name category-name\\r\\n                                       \:category/weight weight\\r\\n                                       \:category/seq seq}])))\\r\\n \\r\\n (defn new-rule [dec-id item-one item-two cat result]\\r\\n  (reset\! db (datascript/db-with @db [{\:rule/user.id user-id\\r\\n                                       \:rule/decision.id dec-id\\r\\n                                       \:rule/id {\:db/id -1}\\r\\n                                       \:rule/item.one.id item-one\\r\\n                                       \:rule/item.two.id item-two\\r\\n                                       \:rule/category.id cat\\r\\n                                       \:rule/item.result.id result\\r\\n                                        \:rule/deleted? false}])))\\r\\n\\r\\n(defn update-rule [dec-id rule-id item-one item-two cat result]\\r\\n  (reset\! db (datascript/db-with @db [{\:rule/user.id user-id\\r\\n                                       \:rule/decision.id dec-id\\r\\n                                       \:rule/id rule-id\\r\\n                                       \:rule/item.one.id item-one\\r\\n                                       \:rule/item.two.id item-two\\r\\n                                       \:rule/category.id cat\\r\\n                                       \:rule/item.result.id result}])))\\r\\n\\r\\n\\r\\n; needs to set all sub tables to soft delete -- user will never see the child when parent is deleted\\r\\n(defn delete-decision [dec-id item-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:decision/user.id user-id\\r\\n                                       \:decision/decision.id dec-id\\r\\n                                       \:decision/id item-id\\r\\n                                       \:decision/deleted? true}])))\\r\\n\\r\\n(defn delete-item [dec-id item-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:item/user.id user-id\\r\\n                                       \:item/decision.id dec-id\\r\\n                                       \:item/id item-id\\r\\n                                       \:item/deleted? true}])))\\r\\n\\r\\n(defn delete-category [dec-id item-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:category/user.id user-id\\r\\n                                       \:category/decision.id dec-id\\r\\n                                       \:category/id item-id\\r\\n                                       \:category/deleted? true}])))\\r\\n\\r\\n\\r\\n(defn delete-rule [dec-id item-id]\\r\\n  (reset\! db (datascript/db-with @db [{\:rule/user.id user-id\\r\\n                                       \:rule/decision.id dec-id\\r\\n                                       \:rule/id item-id\\r\\n                                       \:rule/deleted? true}])))" "(_car)" "%car" "(let [car %c] car)" "(let [car @c] car)" "(let [car c] car)" "(let [car ~c] car)" "(let [car \#c] car)" "(let [car 'c] car)" "(let [car $c] car)" "(let [car _c] car)" "(gensym)" "(map \#(\:name-id %) [{\:name-id 1}{\:name-id 2}])" "(\= {\:one 1} {\:one 1})" "(\= {\:one 1} {\:one 2})" "(\= {\:one 1} {\:one4 1})" "(defmulti event (fn[x] (\:event-type x)))" "(defmethod event \:save [x] (println x))" "(event {\:event-type \:save})" "(defmethod event \:save [x] (println \\"testing\\"))" "(event {\:event-type \:save})" "(event {\:event-type \:savea})" "(event {\:event-type \:save})" "(defrecord {nav-key event-type working-record})" "(defrecord nav-key event-type working-record)" "(defrecord [nav-key event-type working-record])" "(defrecord event-map [nav-key event-type working-record])" "(defrecord save-event [nav-key working-record])" "(save-event 1 2)" "(save-event. 1 2)" "(class (save-event. 1 2))" "(class save-event)" "(class save-event.)" "(primitives-classnames (save-event. 1 2))" "(def buildref  \\r\\n  (future\\r\\n      (def options {\\r\\n                    \:output-to output-file\\r\\n                    \:output-dir output-dir\\r\\n                    \:warnings true})\\r\\n      (c/build \\"src\\" options)     \\r\\n      (c/watch \\"src\\" options))) \\r\\n(def buildref  \\r\\n  (future\\r\\n      (def options {\\r\\n                    \:output-to output-file\\r\\n                    \:output-dir output-dir\\r\\n                    \:warnings true})\\r\\n      (c/build \\"src\\" options)     \\r\\n      (c/watch \\"src\\" options))) \\r\\n(def buildref  \\r\\n  (future\\r\\n      (def options {\\r\\n                    \:output-to output-file\\r\\n                    \:output-dir output-dir\\r\\n                    \:warnings true})\\r\\n      (c/build \\"src\\" options)     \\r\\n      (c/watch \\"src\\" options))) \\r\\n(def buildref  \\r\\n  (future\\r\\n      (def options {\\r\\n                    \:output-to output-file\\r\\n                    \:output-dir output-dir\\r\\n                    \:warnings true})\\r\\n      (c/build \\"src\\" options)     \\r\\n      (c/watch \\"src\\" options)))"]
eclipse.preferences.version=1
